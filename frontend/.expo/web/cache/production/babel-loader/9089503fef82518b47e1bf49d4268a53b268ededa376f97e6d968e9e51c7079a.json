{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"animationIn\",\"animationInTiming\",\"animationOut\",\"animationOutTiming\",\"avoidKeyboard\",\"coverScreen\",\"hasBackdrop\",\"backdropColor\",\"backdropOpacity\",\"backdropTransitionInTiming\",\"backdropTransitionOutTiming\",\"customBackdrop\",\"children\",\"isVisible\",\"onModalShow\",\"onBackButtonPress\",\"useNativeDriver\",\"propagateSwipe\",\"style\"],_excluded2=[\"testID\"];import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import Dimensions from\"react-native-web/dist/exports/Dimensions\";import InteractionManager from\"react-native-web/dist/exports/InteractionManager\";import KeyboardAvoidingView from\"react-native-web/dist/exports/KeyboardAvoidingView\";import Modal from\"react-native-web/dist/exports/Modal\";import PanResponder from\"react-native-web/dist/exports/PanResponder\";import Platform from\"react-native-web/dist/exports/Platform\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import*as animatable from'react-native-animatable';import{buildAnimations,initializeAnimations,reversePercentage}from'./utils';import styles from'./modal.style';import{BackHandler}from'./back-handler.js';initializeAnimations();const defaultProps={animationIn:'slideInUp',animationInTiming:300,animationOut:'slideOutDown',animationOutTiming:300,avoidKeyboard:false,coverScreen:true,hasBackdrop:true,backdropColor:'black',backdropOpacity:0.7,backdropTransitionInTiming:300,backdropTransitionOutTiming:300,customBackdrop:null,useNativeDriver:false,deviceHeight:null,deviceWidth:null,hideModalContentWhileAnimating:false,propagateSwipe:false,isVisible:false,panResponderThreshold:4,swipeThreshold:100,onModalShow:()=>null,onModalWillShow:()=>null,onModalHide:()=>null,onModalWillHide:()=>null,onBackdropPress:()=>null,onBackButtonPress:()=>null,scrollTo:null,scrollOffset:0,scrollOffsetMax:0,scrollHorizontal:false,statusBarTranslucent:false,supportedOrientations:['portrait','landscape']};const extractAnimationFromProps=props=>({animationIn:props.animationIn,animationOut:props.animationOut});export class ReactNativeModal extends React.Component{static defaultProps=defaultProps;backHandler=null;state={showContent:true,isVisible:false,deviceWidth:Dimensions.get('window').width,deviceHeight:Dimensions.get('window').height,isSwipeable:!!this.props.swipeDirection,pan:null};isTransitioning=false;inSwipeClosingState=false;currentSwipingDirection=null;panResponder=null;didUpdateDimensionsEmitter=null;interactionHandle=null;constructor(props){super(props);const{animationIn,animationOut}=buildAnimations(extractAnimationFromProps(props));this.animationIn=animationIn;this.animationOut=animationOut;if(this.state.isSwipeable){this.state=Object.assign({},this.state,{pan:new Animated.ValueXY()});this.buildPanResponder();}if(props.isVisible){this.state=Object.assign({},this.state,{isVisible:true,showContent:true});}}static getDerivedStateFromProps(nextProps,state){if(!state.isVisible&&nextProps.isVisible){return{isVisible:true,showContent:true};}return null;}componentDidMount(){if(this.props.onSwipe){console.warn('`<Modal onSwipe=\"...\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\"...\" />` instead.');}this.didUpdateDimensionsEmitter=DeviceEventEmitter.addListener('didUpdateDimensions',this.handleDimensionsUpdate);if(this.state.isVisible){this.open();}this.backHandler=BackHandler.addEventListener('hardwareBackPress',this.onBackButtonPress);}componentWillUnmount(){if(this.backHandler){this.backHandler.remove();this.backHandler=null;}if(this.didUpdateDimensionsEmitter){this.didUpdateDimensionsEmitter.remove();}if(this.interactionHandle){InteractionManager.clearInteractionHandle(this.interactionHandle);this.interactionHandle=null;}}componentDidUpdate(prevProps){if(this.props.animationIn!==prevProps.animationIn||this.props.animationOut!==prevProps.animationOut){const{animationIn,animationOut}=buildAnimations(extractAnimationFromProps(this.props));this.animationIn=animationIn;this.animationOut=animationOut;}if(this.props.backdropOpacity!==prevProps.backdropOpacity&&this.backdropRef){this.backdropRef.transitionTo({opacity:this.props.backdropOpacity},this.props.backdropTransitionInTiming);}if(this.props.isVisible&&!prevProps.isVisible){this.open();}else if(!this.props.isVisible&&prevProps.isVisible){this.close();}}getDeviceHeight=()=>this.props.deviceHeight||this.state.deviceHeight;getDeviceWidth=()=>this.props.deviceWidth||this.state.deviceWidth;onBackButtonPress=()=>{if(this.props.onBackButtonPress&&this.props.isVisible){this.props.onBackButtonPress();return true;}return false;};shouldPropagateSwipe=(evt,gestureState)=>{return typeof this.props.propagateSwipe==='function'?this.props.propagateSwipe(evt,gestureState):this.props.propagateSwipe;};buildPanResponder=()=>{let animEvt=null;this.panResponder=PanResponder.create({onMoveShouldSetPanResponder:(evt,gestureState)=>{if(!this.shouldPropagateSwipe(evt,gestureState)){const shouldSetPanResponder=Math.abs(gestureState.dx)>=this.props.panResponderThreshold||Math.abs(gestureState.dy)>=this.props.panResponderThreshold;if(shouldSetPanResponder&&this.props.onSwipeStart){this.props.onSwipeStart(gestureState);}this.currentSwipingDirection=this.getSwipingDirection(gestureState);animEvt=this.createAnimationEventForSwipe();return shouldSetPanResponder;}return false;},onStartShouldSetPanResponder:(e,gestureState)=>{const hasScrollableView=e._dispatchInstances&&e._dispatchInstances.some(instance=>/scrollview|flatlist/i.test(instance.type));if(hasScrollableView&&this.shouldPropagateSwipe(e,gestureState)&&this.props.scrollTo&&this.props.scrollOffset>0){return false;}if(this.props.onSwipeStart){this.props.onSwipeStart(gestureState);}this.currentSwipingDirection=null;return true;},onPanResponderMove:(evt,gestureState)=>{if(!this.currentSwipingDirection){if(gestureState.dx===0&&gestureState.dy===0){return;}this.currentSwipingDirection=this.getSwipingDirection(gestureState);animEvt=this.createAnimationEventForSwipe();}if(this.isSwipeDirectionAllowed(gestureState)){const newOpacityFactor=1-this.calcDistancePercentage(gestureState);this.backdropRef&&this.backdropRef.transitionTo({opacity:this.props.backdropOpacity*newOpacityFactor});animEvt(evt,gestureState);if(this.props.onSwipeMove){this.props.onSwipeMove(newOpacityFactor,gestureState);}}else{if(this.props.scrollTo){if(this.props.scrollHorizontal){let offsetX=-gestureState.dx;if(offsetX>this.props.scrollOffsetMax){offsetX-=(offsetX-this.props.scrollOffsetMax)/2;}this.props.scrollTo({x:offsetX,animated:false});}else{let offsetY=-gestureState.dy;if(offsetY>this.props.scrollOffsetMax){offsetY-=(offsetY-this.props.scrollOffsetMax)/2;}this.props.scrollTo({y:offsetY,animated:false});}}}},onPanResponderRelease:(evt,gestureState)=>{const accDistance=this.getAccDistancePerDirection(gestureState);if(accDistance>this.props.swipeThreshold&&this.isSwipeDirectionAllowed(gestureState)){if(this.props.onSwipeComplete){this.inSwipeClosingState=true;this.props.onSwipeComplete({swipingDirection:this.getSwipingDirection(gestureState)},gestureState);return;}if(this.props.onSwipe){this.inSwipeClosingState=true;this.props.onSwipe();return;}}if(this.props.onSwipeCancel){this.props.onSwipeCancel(gestureState);}if(this.backdropRef){this.backdropRef.transitionTo({opacity:this.props.backdropOpacity});}Animated.spring(this.state.pan,{toValue:{x:0,y:0},bounciness:0,useNativeDriver:false}).start();if(this.props.scrollTo){if(this.props.scrollOffset>this.props.scrollOffsetMax){this.props.scrollTo({y:this.props.scrollOffsetMax,animated:true});}}}});};getAccDistancePerDirection=gestureState=>{switch(this.currentSwipingDirection){case'up':return-gestureState.dy;case'down':return gestureState.dy;case'right':return gestureState.dx;case'left':return-gestureState.dx;default:return 0;}};getSwipingDirection=gestureState=>{if(Math.abs(gestureState.dx)>Math.abs(gestureState.dy)){return gestureState.dx>0?'right':'left';}return gestureState.dy>0?'down':'up';};calcDistancePercentage=gestureState=>{switch(this.currentSwipingDirection){case'down':return(gestureState.moveY-gestureState.y0)/((this.props.deviceHeight||this.state.deviceHeight)-gestureState.y0);case'up':return reversePercentage(gestureState.moveY/gestureState.y0);case'left':return reversePercentage(gestureState.moveX/gestureState.x0);case'right':return(gestureState.moveX-gestureState.x0)/((this.props.deviceWidth||this.state.deviceWidth)-gestureState.x0);default:return 0;}};createAnimationEventForSwipe=()=>{if(this.currentSwipingDirection==='right'||this.currentSwipingDirection==='left'){return Animated.event([null,{dx:this.state.pan.x}],{useNativeDriver:false});}else{return Animated.event([null,{dy:this.state.pan.y}],{useNativeDriver:false});}};isDirectionIncluded=direction=>{return Array.isArray(this.props.swipeDirection)?this.props.swipeDirection.includes(direction):this.props.swipeDirection===direction;};isSwipeDirectionAllowed=({dy,dx})=>{const draggedDown=dy>0;const draggedUp=dy<0;const draggedLeft=dx<0;const draggedRight=dx>0;if(this.currentSwipingDirection==='up'&&this.isDirectionIncluded('up')&&draggedUp){return true;}else if(this.currentSwipingDirection==='down'&&this.isDirectionIncluded('down')&&draggedDown){return true;}else if(this.currentSwipingDirection==='right'&&this.isDirectionIncluded('right')&&draggedRight){return true;}else if(this.currentSwipingDirection==='left'&&this.isDirectionIncluded('left')&&draggedLeft){return true;}return false;};handleDimensionsUpdate=()=>{if(!this.props.deviceHeight&&!this.props.deviceWidth){const deviceWidth=Dimensions.get('window').width;const deviceHeight=Dimensions.get('window').height;if(deviceWidth!==this.state.deviceWidth||deviceHeight!==this.state.deviceHeight){this.setState({deviceWidth,deviceHeight});}}};open=()=>{if(this.isTransitioning){return;}this.isTransitioning=true;if(this.backdropRef){this.backdropRef.transitionTo({opacity:this.props.backdropOpacity},this.props.backdropTransitionInTiming);}if(this.state.isSwipeable){this.state.pan.setValue({x:0,y:0});}if(this.contentRef){this.props.onModalWillShow&&this.props.onModalWillShow();if(this.interactionHandle==null){this.interactionHandle=InteractionManager.createInteractionHandle();}this.contentRef.animate(this.animationIn,this.props.animationInTiming).then(()=>{this.isTransitioning=false;if(this.interactionHandle){InteractionManager.clearInteractionHandle(this.interactionHandle);this.interactionHandle=null;}if(!this.props.isVisible){this.close();}else{this.props.onModalShow();}});}};close=()=>{if(this.isTransitioning){return;}this.isTransitioning=true;if(this.backdropRef){this.backdropRef.transitionTo({opacity:0},this.props.backdropTransitionOutTiming);}let animationOut=this.animationOut;if(this.inSwipeClosingState){this.inSwipeClosingState=false;if(this.currentSwipingDirection==='up'){animationOut='slideOutUp';}else if(this.currentSwipingDirection==='down'){animationOut='slideOutDown';}else if(this.currentSwipingDirection==='right'){animationOut='slideOutRight';}else if(this.currentSwipingDirection==='left'){animationOut='slideOutLeft';}}if(this.contentRef){this.props.onModalWillHide&&this.props.onModalWillHide();if(this.interactionHandle==null){this.interactionHandle=InteractionManager.createInteractionHandle();}this.contentRef.animate(animationOut,this.props.animationOutTiming).then(()=>{this.isTransitioning=false;if(this.interactionHandle){InteractionManager.clearInteractionHandle(this.interactionHandle);this.interactionHandle=null;}if(this.props.isVisible){this.open();}else{this.setState({showContent:false},()=>{this.setState({isVisible:false},()=>{this.props.onModalHide();});});}});}};makeBackdrop=()=>{if(!this.props.hasBackdrop){return null;}if(this.props.customBackdrop&&!React.isValidElement(this.props.customBackdrop)){console.warn('Invalid customBackdrop element passed to Modal. You must provide a valid React element.');}const{customBackdrop,backdropColor,useNativeDriver,useNativeDriverForBackdrop,onBackdropPress}=this.props;const hasCustomBackdrop=!!this.props.customBackdrop;const backdropComputedStyle=[{width:this.getDeviceWidth(),height:this.getDeviceHeight(),backgroundColor:this.state.showContent&&!hasCustomBackdrop?backdropColor:'transparent'}];const backdropWrapper=React.createElement(animatable.View,{ref:ref=>this.backdropRef=ref,useNativeDriver:useNativeDriverForBackdrop!==undefined?useNativeDriverForBackdrop:useNativeDriver,style:[styles.backdrop,backdropComputedStyle]},hasCustomBackdrop&&customBackdrop);if(hasCustomBackdrop){return backdropWrapper;}return React.createElement(TouchableWithoutFeedback,{onPress:onBackdropPress},backdropWrapper);};render(){const _this$props=this.props,{avoidKeyboard,coverScreen,children,onBackButtonPress,useNativeDriver,style}=_this$props,otherProps=_objectWithoutPropertiesLoose(_this$props,_excluded);const containerProps=_objectWithoutPropertiesLoose(otherProps,_excluded2);const computedStyle=[{margin:this.getDeviceWidth()*0.05,transform:[{translateY:0}]},styles.content,style];let panHandlers={};let panPosition={};if(this.state.isSwipeable){panHandlers=Object.assign({},this.panResponder.panHandlers);if(useNativeDriver){panPosition={transform:this.state.pan.getTranslateTransform()};}else{panPosition=this.state.pan.getLayout();}}const _children=this.props.hideModalContentWhileAnimating&&this.props.useNativeDriver&&!this.state.showContent?(React.createElement(animatable.View,null)):children;const containerView=React.createElement(animatable.View,Object.assign({},panHandlers,{ref:ref=>this.contentRef=ref,style:[panPosition,computedStyle],pointerEvents:\"box-none\",useNativeDriver:useNativeDriver},containerProps),_children);if(!coverScreen&&this.state.isVisible){return React.createElement(View,{pointerEvents:\"box-none\",style:[styles.backdrop,styles.containerBox]},this.makeBackdrop(),containerView);}return React.createElement(Modal,Object.assign({transparent:true,animationType:'none',visible:this.state.isVisible,onRequestClose:onBackButtonPress},otherProps),this.makeBackdrop(),avoidKeyboard?(React.createElement(KeyboardAvoidingView,{behavior:false?'padding':undefined,pointerEvents:\"box-none\",style:computedStyle.concat([{margin:0}])},containerView)):containerView);}}export default ReactNativeModal;","map":{"version":3,"names":["React","Animated","DeviceEventEmitter","Dimensions","InteractionManager","KeyboardAvoidingView","Modal","PanResponder","Platform","TouchableWithoutFeedback","View","animatable","buildAnimations","initializeAnimations","reversePercentage","styles","BackHandler","defaultProps","animationIn","animationInTiming","animationOut","animationOutTiming","avoidKeyboard","coverScreen","hasBackdrop","backdropColor","backdropOpacity","backdropTransitionInTiming","backdropTransitionOutTiming","customBackdrop","useNativeDriver","deviceHeight","deviceWidth","hideModalContentWhileAnimating","propagateSwipe","isVisible","panResponderThreshold","swipeThreshold","onModalShow","onModalWillShow","onModalHide","onModalWillHide","onBackdropPress","onBackButtonPress","scrollTo","scrollOffset","scrollOffsetMax","scrollHorizontal","statusBarTranslucent","supportedOrientations","extractAnimationFromProps","props","ReactNativeModal","Component","backHandler","state","showContent","get","width","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","currentSwipingDirection","panResponder","didUpdateDimensionsEmitter","interactionHandle","constructor","Object","assign","ValueXY","buildPanResponder","getDerivedStateFromProps","nextProps","componentDidMount","onSwipe","console","warn","addListener","handleDimensionsUpdate","open","addEventListener","componentWillUnmount","remove","clearInteractionHandle","componentDidUpdate","prevProps","backdropRef","transitionTo","opacity","close","getDeviceHeight","getDeviceWidth","shouldPropagateSwipe","evt","gestureState","animEvt","create","onMoveShouldSetPanResponder","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","e","hasScrollableView","_dispatchInstances","some","instance","test","type","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","onSwipeMove","offsetX","x","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","onSwipeComplete","swipingDirection","onSwipeCancel","spring","toValue","bounciness","start","moveY","y0","moveX","x0","event","isDirectionIncluded","direction","Array","isArray","includes","draggedDown","draggedUp","draggedLeft","draggedRight","setState","setValue","contentRef","createInteractionHandle","animate","then","makeBackdrop","isValidElement","useNativeDriverForBackdrop","hasCustomBackdrop","backdropComputedStyle","backgroundColor","backdropWrapper","createElement","ref","undefined","style","backdrop","onPress","render","_this$props","children","otherProps","_objectWithoutPropertiesLoose","_excluded","containerProps","_excluded2","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","containerView","pointerEvents","containerBox","transparent","animationType","visible","onRequestClose","behavior","concat"],"sources":["/Users/deu/SigmaLTD/frontend/node_modules/react-native-modal/dist/modal.js"],"sourcesContent":["import * as React from 'react';\nimport { Animated, DeviceEventEmitter, Dimensions, InteractionManager, KeyboardAvoidingView, Modal, PanResponder, Platform, TouchableWithoutFeedback, View, } from 'react-native';\nimport * as animatable from 'react-native-animatable';\nimport { buildAnimations, initializeAnimations, reversePercentage, } from './utils';\nimport styles from './modal.style';\nimport { BackHandler } from './back-handler.js';\n// Override default react-native-animatable animations\ninitializeAnimations();\nconst defaultProps = {\n    animationIn: 'slideInUp',\n    animationInTiming: 300,\n    animationOut: 'slideOutDown',\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    coverScreen: true,\n    hasBackdrop: true,\n    backdropColor: 'black',\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    customBackdrop: null,\n    useNativeDriver: false,\n    deviceHeight: null,\n    deviceWidth: null,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: false,\n    isVisible: false,\n    panResponderThreshold: 4,\n    swipeThreshold: 100,\n    onModalShow: (() => null),\n    onModalWillShow: (() => null),\n    onModalHide: (() => null),\n    onModalWillHide: (() => null),\n    onBackdropPress: (() => null),\n    onBackButtonPress: (() => null),\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    scrollHorizontal: false,\n    statusBarTranslucent: false,\n    supportedOrientations: ['portrait', 'landscape'],\n};\nconst extractAnimationFromProps = (props) => ({\n    animationIn: props.animationIn,\n    animationOut: props.animationOut,\n});\nexport class ReactNativeModal extends React.Component {\n    static defaultProps = defaultProps;\n    backHandler = null;\n    // We use an internal state for keeping track of the modal visibility: this allows us to keep\n    // the modal visible during the exit animation, even if the user has already change the\n    // isVisible prop to false.\n    // We store in the state the device width and height so that we can update the modal on\n    // device rotation.\n    state = {\n        showContent: true,\n        isVisible: false,\n        deviceWidth: Dimensions.get('window').width,\n        deviceHeight: Dimensions.get('window').height,\n        isSwipeable: !!this.props.swipeDirection,\n        pan: null,\n    };\n    isTransitioning = false;\n    inSwipeClosingState = false;\n    currentSwipingDirection = null;\n    animationIn;\n    animationOut;\n    backdropRef;\n    contentRef;\n    panResponder = null;\n    didUpdateDimensionsEmitter = null;\n    interactionHandle = null;\n    constructor(props) {\n        super(props);\n        const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(props));\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n        if (this.state.isSwipeable) {\n            this.state = {\n                ...this.state,\n                pan: new Animated.ValueXY(),\n            };\n            this.buildPanResponder();\n        }\n        if (props.isVisible) {\n            this.state = {\n                ...this.state,\n                isVisible: true,\n                showContent: true,\n            };\n        }\n    }\n    static getDerivedStateFromProps(nextProps, state) {\n        if (!state.isVisible && nextProps.isVisible) {\n            return { isVisible: true, showContent: true };\n        }\n        return null;\n    }\n    componentDidMount() {\n        // Show deprecation message\n        if (this.props.onSwipe) {\n            console.warn('`<Modal onSwipe=\"...\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n        }\n        this.didUpdateDimensionsEmitter = DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);\n        if (this.state.isVisible) {\n            this.open();\n        }\n        this.backHandler = BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPress);\n    }\n    componentWillUnmount() {\n        if (this.backHandler) {\n            this.backHandler.remove();\n            this.backHandler = null;\n        }\n        if (this.didUpdateDimensionsEmitter) {\n            this.didUpdateDimensionsEmitter.remove();\n        }\n        if (this.interactionHandle) {\n            InteractionManager.clearInteractionHandle(this.interactionHandle);\n            this.interactionHandle = null;\n        }\n    }\n    componentDidUpdate(prevProps) {\n        // If the animations have been changed then rebuild them to make sure we're\n        // using the most up-to-date ones\n        if (this.props.animationIn !== prevProps.animationIn ||\n            this.props.animationOut !== prevProps.animationOut) {\n            const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(this.props));\n            this.animationIn = animationIn;\n            this.animationOut = animationOut;\n        }\n        // If backdrop opacity has been changed then make sure to update it\n        if (this.props.backdropOpacity !== prevProps.backdropOpacity &&\n            this.backdropRef) {\n            this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n        }\n        // On modal open request, we slide the view up and fade in the backdrop\n        if (this.props.isVisible && !prevProps.isVisible) {\n            this.open();\n        }\n        else if (!this.props.isVisible && prevProps.isVisible) {\n            // On modal close request, we slide the view down and fade out the backdrop\n            this.close();\n        }\n    }\n    getDeviceHeight = () => this.props.deviceHeight || this.state.deviceHeight;\n    getDeviceWidth = () => this.props.deviceWidth || this.state.deviceWidth;\n    onBackButtonPress = () => {\n        if (this.props.onBackButtonPress && this.props.isVisible) {\n            this.props.onBackButtonPress();\n            return true;\n        }\n        return false;\n    };\n    shouldPropagateSwipe = (evt, gestureState) => {\n        return typeof this.props.propagateSwipe === 'function'\n            ? this.props.propagateSwipe(evt, gestureState)\n            : this.props.propagateSwipe;\n    };\n    buildPanResponder = () => {\n        let animEvt = null;\n        this.panResponder = PanResponder.create({\n            onMoveShouldSetPanResponder: (evt, gestureState) => {\n                // Use propagateSwipe to allow inner content to scroll. See PR:\n                // https://github.com/react-native-community/react-native-modal/pull/246\n                if (!this.shouldPropagateSwipe(evt, gestureState)) {\n                    // The number \"4\" is just a good tradeoff to make the panResponder\n                    // work correctly even when the modal has touchable buttons.\n                    // However, if you want to overwrite this and choose for yourself,\n                    // set panResponderThreshold in the props.\n                    // For reference:\n                    // https://github.com/react-native-community/react-native-modal/pull/197\n                    const shouldSetPanResponder = Math.abs(gestureState.dx) >= this.props.panResponderThreshold ||\n                        Math.abs(gestureState.dy) >= this.props.panResponderThreshold;\n                    if (shouldSetPanResponder && this.props.onSwipeStart) {\n                        this.props.onSwipeStart(gestureState);\n                    }\n                    this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                    animEvt = this.createAnimationEventForSwipe();\n                    return shouldSetPanResponder;\n                }\n                return false;\n            },\n            onStartShouldSetPanResponder: (e, gestureState) => {\n                const hasScrollableView = e._dispatchInstances &&\n                    e._dispatchInstances.some((instance) => /scrollview|flatlist/i.test(instance.type));\n                if (hasScrollableView &&\n                    this.shouldPropagateSwipe(e, gestureState) &&\n                    this.props.scrollTo &&\n                    this.props.scrollOffset > 0) {\n                    return false; // user needs to be able to scroll content back up\n                }\n                if (this.props.onSwipeStart) {\n                    this.props.onSwipeStart(gestureState);\n                }\n                // Cleared so that onPanResponderMove can wait to have some delta\n                // to work with\n                this.currentSwipingDirection = null;\n                return true;\n            },\n            onPanResponderMove: (evt, gestureState) => {\n                // Using onStartShouldSetPanResponder we don't have any delta so we don't know\n                // The direction to which the user is swiping until some move have been done\n                if (!this.currentSwipingDirection) {\n                    if (gestureState.dx === 0 && gestureState.dy === 0) {\n                        return;\n                    }\n                    this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                    animEvt = this.createAnimationEventForSwipe();\n                }\n                if (this.isSwipeDirectionAllowed(gestureState)) {\n                    // Dim the background while swiping the modal\n                    const newOpacityFactor = 1 - this.calcDistancePercentage(gestureState);\n                    this.backdropRef &&\n                        this.backdropRef.transitionTo({\n                            opacity: this.props.backdropOpacity * newOpacityFactor,\n                        });\n                    animEvt(evt, gestureState);\n                    if (this.props.onSwipeMove) {\n                        this.props.onSwipeMove(newOpacityFactor, gestureState);\n                    }\n                }\n                else {\n                    if (this.props.scrollTo) {\n                        if (this.props.scrollHorizontal) {\n                            let offsetX = -gestureState.dx;\n                            if (offsetX > this.props.scrollOffsetMax) {\n                                offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\n                            }\n                            this.props.scrollTo({ x: offsetX, animated: false });\n                        }\n                        else {\n                            let offsetY = -gestureState.dy;\n                            if (offsetY > this.props.scrollOffsetMax) {\n                                offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n                            }\n                            this.props.scrollTo({ y: offsetY, animated: false });\n                        }\n                    }\n                }\n            },\n            onPanResponderRelease: (evt, gestureState) => {\n                // Call the onSwipe prop if the threshold has been exceeded on the right direction\n                const accDistance = this.getAccDistancePerDirection(gestureState);\n                if (accDistance > this.props.swipeThreshold &&\n                    this.isSwipeDirectionAllowed(gestureState)) {\n                    if (this.props.onSwipeComplete) {\n                        this.inSwipeClosingState = true;\n                        this.props.onSwipeComplete({\n                            swipingDirection: this.getSwipingDirection(gestureState),\n                        }, gestureState);\n                        return;\n                    }\n                    // Deprecated. Remove later.\n                    if (this.props.onSwipe) {\n                        this.inSwipeClosingState = true;\n                        this.props.onSwipe();\n                        return;\n                    }\n                }\n                //Reset backdrop opacity and modal position\n                if (this.props.onSwipeCancel) {\n                    this.props.onSwipeCancel(gestureState);\n                }\n                if (this.backdropRef) {\n                    this.backdropRef.transitionTo({\n                        opacity: this.props.backdropOpacity,\n                    });\n                }\n                Animated.spring(this.state.pan, {\n                    toValue: { x: 0, y: 0 },\n                    bounciness: 0,\n                    useNativeDriver: false,\n                }).start();\n                if (this.props.scrollTo) {\n                    if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n                        this.props.scrollTo({\n                            y: this.props.scrollOffsetMax,\n                            animated: true,\n                        });\n                    }\n                }\n            },\n        });\n    };\n    getAccDistancePerDirection = (gestureState) => {\n        switch (this.currentSwipingDirection) {\n            case 'up':\n                return -gestureState.dy;\n            case 'down':\n                return gestureState.dy;\n            case 'right':\n                return gestureState.dx;\n            case 'left':\n                return -gestureState.dx;\n            default:\n                return 0;\n        }\n    };\n    getSwipingDirection = (gestureState) => {\n        if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n            return gestureState.dx > 0 ? 'right' : 'left';\n        }\n        return gestureState.dy > 0 ? 'down' : 'up';\n    };\n    calcDistancePercentage = (gestureState) => {\n        switch (this.currentSwipingDirection) {\n            case 'down':\n                return ((gestureState.moveY - gestureState.y0) /\n                    ((this.props.deviceHeight || this.state.deviceHeight) -\n                        gestureState.y0));\n            case 'up':\n                return reversePercentage(gestureState.moveY / gestureState.y0);\n            case 'left':\n                return reversePercentage(gestureState.moveX / gestureState.x0);\n            case 'right':\n                return ((gestureState.moveX - gestureState.x0) /\n                    ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0));\n            default:\n                return 0;\n        }\n    };\n    createAnimationEventForSwipe = () => {\n        if (this.currentSwipingDirection === 'right' ||\n            this.currentSwipingDirection === 'left') {\n            return Animated.event([null, { dx: this.state.pan.x }], {\n                useNativeDriver: false,\n            });\n        }\n        else {\n            return Animated.event([null, { dy: this.state.pan.y }], {\n                useNativeDriver: false,\n            });\n        }\n    };\n    isDirectionIncluded = (direction) => {\n        return Array.isArray(this.props.swipeDirection)\n            ? this.props.swipeDirection.includes(direction)\n            : this.props.swipeDirection === direction;\n    };\n    isSwipeDirectionAllowed = ({ dy, dx }) => {\n        const draggedDown = dy > 0;\n        const draggedUp = dy < 0;\n        const draggedLeft = dx < 0;\n        const draggedRight = dx > 0;\n        if (this.currentSwipingDirection === 'up' &&\n            this.isDirectionIncluded('up') &&\n            draggedUp) {\n            return true;\n        }\n        else if (this.currentSwipingDirection === 'down' &&\n            this.isDirectionIncluded('down') &&\n            draggedDown) {\n            return true;\n        }\n        else if (this.currentSwipingDirection === 'right' &&\n            this.isDirectionIncluded('right') &&\n            draggedRight) {\n            return true;\n        }\n        else if (this.currentSwipingDirection === 'left' &&\n            this.isDirectionIncluded('left') &&\n            draggedLeft) {\n            return true;\n        }\n        return false;\n    };\n    handleDimensionsUpdate = () => {\n        if (!this.props.deviceHeight && !this.props.deviceWidth) {\n            // Here we update the device dimensions in the state if the layout changed\n            // (triggering a render)\n            const deviceWidth = Dimensions.get('window').width;\n            const deviceHeight = Dimensions.get('window').height;\n            if (deviceWidth !== this.state.deviceWidth ||\n                deviceHeight !== this.state.deviceHeight) {\n                this.setState({ deviceWidth, deviceHeight });\n            }\n        }\n    };\n    open = () => {\n        if (this.isTransitioning) {\n            return;\n        }\n        this.isTransitioning = true;\n        if (this.backdropRef) {\n            this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n        }\n        // This is for resetting the pan position,otherwise the modal gets stuck\n        // at the last released position when you try to open it.\n        // TODO: Could certainly be improved - no idea for the moment.\n        if (this.state.isSwipeable) {\n            this.state.pan.setValue({ x: 0, y: 0 });\n        }\n        if (this.contentRef) {\n            this.props.onModalWillShow && this.props.onModalWillShow();\n            if (this.interactionHandle == null) {\n                this.interactionHandle = InteractionManager.createInteractionHandle();\n            }\n            this.contentRef\n                .animate(this.animationIn, this.props.animationInTiming)\n                .then(() => {\n                this.isTransitioning = false;\n                if (this.interactionHandle) {\n                    InteractionManager.clearInteractionHandle(this.interactionHandle);\n                    this.interactionHandle = null;\n                }\n                if (!this.props.isVisible) {\n                    this.close();\n                }\n                else {\n                    this.props.onModalShow();\n                }\n            });\n        }\n    };\n    close = () => {\n        if (this.isTransitioning) {\n            return;\n        }\n        this.isTransitioning = true;\n        if (this.backdropRef) {\n            this.backdropRef.transitionTo({ opacity: 0 }, this.props.backdropTransitionOutTiming);\n        }\n        let animationOut = this.animationOut;\n        if (this.inSwipeClosingState) {\n            this.inSwipeClosingState = false;\n            if (this.currentSwipingDirection === 'up') {\n                animationOut = 'slideOutUp';\n            }\n            else if (this.currentSwipingDirection === 'down') {\n                animationOut = 'slideOutDown';\n            }\n            else if (this.currentSwipingDirection === 'right') {\n                animationOut = 'slideOutRight';\n            }\n            else if (this.currentSwipingDirection === 'left') {\n                animationOut = 'slideOutLeft';\n            }\n        }\n        if (this.contentRef) {\n            this.props.onModalWillHide && this.props.onModalWillHide();\n            if (this.interactionHandle == null) {\n                this.interactionHandle = InteractionManager.createInteractionHandle();\n            }\n            this.contentRef\n                .animate(animationOut, this.props.animationOutTiming)\n                .then(() => {\n                this.isTransitioning = false;\n                if (this.interactionHandle) {\n                    InteractionManager.clearInteractionHandle(this.interactionHandle);\n                    this.interactionHandle = null;\n                }\n                if (this.props.isVisible) {\n                    this.open();\n                }\n                else {\n                    this.setState({\n                        showContent: false,\n                    }, () => {\n                        this.setState({\n                            isVisible: false,\n                        }, () => {\n                            this.props.onModalHide();\n                        });\n                    });\n                }\n            });\n        }\n    };\n    makeBackdrop = () => {\n        if (!this.props.hasBackdrop) {\n            return null;\n        }\n        if (this.props.customBackdrop &&\n            !React.isValidElement(this.props.customBackdrop)) {\n            console.warn('Invalid customBackdrop element passed to Modal. You must provide a valid React element.');\n        }\n        const { customBackdrop, backdropColor, useNativeDriver, useNativeDriverForBackdrop, onBackdropPress, } = this.props;\n        const hasCustomBackdrop = !!this.props.customBackdrop;\n        const backdropComputedStyle = [\n            {\n                width: this.getDeviceWidth(),\n                height: this.getDeviceHeight(),\n                backgroundColor: this.state.showContent && !hasCustomBackdrop\n                    ? backdropColor\n                    : 'transparent',\n            },\n        ];\n        const backdropWrapper = (React.createElement(animatable.View\n        // @ts-expect-error TODO fix it\n        , { \n            // @ts-expect-error TODO fix it\n            ref: ref => (this.backdropRef = ref), useNativeDriver: useNativeDriverForBackdrop !== undefined\n                ? useNativeDriverForBackdrop\n                : useNativeDriver, style: [styles.backdrop, backdropComputedStyle] }, hasCustomBackdrop && customBackdrop));\n        if (hasCustomBackdrop) {\n            // The user will handle backdrop presses himself\n            return backdropWrapper;\n        }\n        // If there's no custom backdrop, handle presses with\n        // TouchableWithoutFeedback\n        return (React.createElement(TouchableWithoutFeedback, { onPress: onBackdropPress }, backdropWrapper));\n    };\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const { animationIn, animationInTiming, animationOut, animationOutTiming, avoidKeyboard, coverScreen, hasBackdrop, backdropColor, backdropOpacity, backdropTransitionInTiming, backdropTransitionOutTiming, customBackdrop, children, isVisible, onModalShow, onBackButtonPress, useNativeDriver, propagateSwipe, style, ...otherProps } = this.props;\n        const { testID, ...containerProps } = otherProps;\n        const computedStyle = [\n            { margin: this.getDeviceWidth() * 0.05, transform: [{ translateY: 0 }] },\n            styles.content,\n            style,\n        ];\n        let panHandlers = {};\n        let panPosition = {};\n        if (this.state.isSwipeable) {\n            panHandlers = { ...this.panResponder.panHandlers };\n            if (useNativeDriver) {\n                panPosition = {\n                    transform: this.state.pan.getTranslateTransform(),\n                };\n            }\n            else {\n                panPosition = this.state.pan.getLayout();\n            }\n        }\n        // The user might decide not to show the modal while it is animating\n        // to enhance performance.\n        const _children = this.props.hideModalContentWhileAnimating &&\n            this.props.useNativeDriver &&\n            !this.state.showContent ? (React.createElement(animatable.View, null)) : (children);\n        const containerView = (React.createElement(animatable.View, { ...panHandlers, \n            // @ts-expect-error TODO fix it\n            ref: ref => (this.contentRef = ref), style: [panPosition, computedStyle], pointerEvents: \"box-none\", useNativeDriver: useNativeDriver, ...containerProps }, _children));\n        // If coverScreen is set to false by the user\n        // we render the modal inside the parent view directly\n        if (!coverScreen && this.state.isVisible) {\n            return (React.createElement(View, { pointerEvents: \"box-none\", style: [styles.backdrop, styles.containerBox] },\n                this.makeBackdrop(),\n                containerView));\n        }\n        return (React.createElement(Modal, { transparent: true, animationType: 'none', visible: this.state.isVisible, onRequestClose: onBackButtonPress, ...otherProps },\n            this.makeBackdrop(),\n            avoidKeyboard ? (React.createElement(KeyboardAvoidingView, { behavior: Platform.OS === 'ios' ? 'padding' : undefined, pointerEvents: \"box-none\", style: computedStyle.concat([{ margin: 0 }]) }, containerView)) : (containerView)));\n    }\n}\nexport default ReactNativeModal;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}