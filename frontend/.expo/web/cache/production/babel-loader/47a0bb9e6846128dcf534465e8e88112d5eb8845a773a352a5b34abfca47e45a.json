{"ast":null,"code":"import AsyncStorage from\"@react-native-async-storage/async-storage\";export const BASE_URL='https://www.sigmaltd.space';export const API_URL=BASE_URL+'/api';const getToken=async()=>{return await AsyncStorage.getItem('token');};const authHeaders=async()=>{const token=await getToken();if(!token||token==='undefined'||token==='null'){console.warn('Token is empty or invalid:',token);return{'Content-Type':'application/json'};}return{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'};};const Database={init:async()=>{console.log('Database initialized (API mode with JWT)');},register:async({email,password,realName,group,displayedName})=>{const response=await fetch(`${API_URL}/register`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password,realName,group,displayedName})});if(!response.ok)throw new Error(await response.text());const data=await response.json();await AsyncStorage.setItem('token',data.token);return data.user;},login:async({email,password})=>{const response=await fetch(`${API_URL}/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});if(!response.ok)throw new Error(await response.text());const data=await response.json();await AsyncStorage.setItem('token',data.token);return data.user;},logout:async()=>{await AsyncStorage.removeItem('token');const response=await fetch(`${API_URL}/logout`,{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok)throw new Error(await response.text());return await response.json();},getCurrentUser:async()=>{const response=await fetch(`${API_URL}/current-user`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getUser:async id=>{const response=await fetch(`${API_URL}/user/${id}`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getUsername:async setUsername=>{const user=await Database.getCurrentUser();setUsername&&setUsername(user.displayedName);return user.idUser;},changeUsername:async username=>{const response=await fetch(`${API_URL}/current-user`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({username})});if(!response.ok)throw new Error(await response.text());return await response.json();},changeImage:async payload=>{const response=await fetch(`${API_URL}/current-user`,{method:'POST',headers:await authHeaders(),body:JSON.stringify(payload)});if(!response.ok)throw new Error(await response.text());return await response.json();},addPost:async payload=>{try{const response=await fetch(`${API_URL}/posts`,{method:'POST',headers:await authHeaders(),body:JSON.stringify(payload)});const responseText=await response.text();if(!response.ok){console.error('Post error response:',responseText);throw new Error(responseText||'Failed to upload post');}return JSON.parse(responseText);}catch(error){console.error('Network error:',error);throw error;}},getAllPosts:async page=>{const response=await fetch(`${API_URL}/posts?page=${page}&pageSize=10`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getPost:async postId=>{const response=await fetch(`${API_URL}/post/${postId}`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},deletePost:async postId=>{const response=await fetch(`${API_URL}/posts`,{method:'DELETE',headers:await authHeaders(),body:JSON.stringify({postId:postId})});if(!response.ok)throw new Error(await response.text());return await response.json();},getFollowingPosts:async page=>{const response=await fetch(`${API_URL}/following-posts?page=${page}&pageSize=10`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getAllComments:async page=>{const response=await fetch(`${API_URL}/comments?page=${page}&pageSize=10`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getPostComments:async postId=>{const response=await fetch(`${API_URL}/post/${postId}/comments`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},getPostCommentsCount:async postId=>{const response=await fetch(`${API_URL}/post/${postId}/comments-count`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},addComment:async({postId,content})=>{const response=await fetch(`${API_URL}/comments`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({postId,content})});if(!response.ok)throw new Error(await response.text());return await response.json();},likePost:async postId=>{const response=await fetch(`${API_URL}/like-post`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({postId})});if(!response.ok)throw new Error(await response.text());return await response.json();},getLikePost:async postId=>{const response=await fetch(`${API_URL}/like-post?idPost=${postId}`,{method:'GET',headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},unlikePost:async postId=>{const response=await fetch(`${API_URL}/unlike-post`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({postId})});if(!response.ok)throw new Error(await response.text());return await response.json();},getCommentLikes:async commentId=>{const response=await fetch(`${API_URL}/get-comment-likes`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({commentId})});if(!response.ok)throw new Error(await response.text());return await response.json();},likeComment:async commentId=>{const response=await fetch(`${API_URL}/like-comment`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({commentId})});if(!response.ok)throw new Error(await response.text());return await response.json();},unlikeComment:async commentId=>{const response=await fetch(`${API_URL}/unlike-comment`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({commentId})});if(!response.ok)throw new Error(await response.text());return await response.json();},followTag:async tagName=>{const response=await fetch(`${API_URL}/follow-tag`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({tagName})});if(!response.ok)throw new Error(await response.text());return await response.json();},unfollowTag:async tagName=>{const response=await fetch(`${API_URL}/unfollow-tag`,{method:'POST',headers:await authHeaders(),body:JSON.stringify({tagName})});if(!response.ok)throw new Error(await response.text());return await response.json();},getFollowedTags:async()=>{const response=await fetch(`${API_URL}/followed-tags`,{headers:await authHeaders()});if(!response.ok)throw new Error(await response.text());return await response.json();},addCommentBase64:async({postId,content,isAnonymous,imageBase64})=>{const token=await AsyncStorage.getItem('token');const payload={postId,content,isAnonymous,imageBase64};const response=await fetch(`${API_URL}/comments`,{method:'POST',headers:{Authorization:`Bearer ${token}`,'Content-Type':'application/json'},body:JSON.stringify(payload)});if(!response.ok){throw new Error(await response.text());}const result=await response.json();return result;}};Database.init();export default Database;","map":{"version":3,"names":["AsyncStorage","BASE_URL","API_URL","getToken","getItem","authHeaders","token","console","warn","Database","init","log","register","email","password","realName","group","displayedName","response","fetch","method","headers","body","JSON","stringify","ok","Error","text","data","json","setItem","user","login","logout","removeItem","getCurrentUser","getUser","id","getUsername","setUsername","idUser","changeUsername","username","changeImage","payload","addPost","responseText","error","parse","getAllPosts","page","getPost","postId","deletePost","getFollowingPosts","getAllComments","getPostComments","getPostCommentsCount","addComment","content","likePost","getLikePost","unlikePost","getCommentLikes","commentId","likeComment","unlikeComment","followTag","tagName","unfollowTag","getFollowedTags","addCommentBase64","isAnonymous","imageBase64","Authorization","result"],"sources":["/Users/deu/SigmaLTD/database.js"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const BASE_URL = 'https://www.sigmaltd.space';\nexport const API_URL = BASE_URL + '/api';\n\n// Helper to get the token from AsyncStorage\nconst getToken = async () => {\n\treturn await AsyncStorage.getItem('token');\n};\n\n// Helper to add Authorization header with token\nconst authHeaders = async () => {\n\tconst token = await getToken();\n\n\tif (!token || token === 'undefined' || token === 'null') {\n\t\tconsole.warn('Token is empty or invalid:', token);\n\t\treturn { 'Content-Type': 'application/json' };\n\t}\n\n\treturn {\n\t\t'Authorization': `Bearer ${token}`,\n\t\t'Content-Type': 'application/json'\n\t};\n};\n\nconst Database = {\n\tinit: async () => {\n\t\tconsole.log('Database initialized (API mode with JWT)');\n\t},\n\n\tregister: async ({ email, password, realName, group, displayedName }) => {\n\t\tconst response = await fetch(`${API_URL}/register`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify({ email, password, realName, group, displayedName }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\tconst data = await response.json();\n\t\tawait AsyncStorage.setItem('token', data.token); // Store token\n\t\treturn data.user; // Return user data\n\t},\n\n\tlogin: async ({ email, password }) => {\n\t\tconst response = await fetch(`${API_URL}/login`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify({ email, password }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\tconst data = await response.json();\n\t\tawait AsyncStorage.setItem('token', data.token); // Store token\n\t\treturn data.user; // Return user data\n\t},\n\n\tlogout: async () => {\n\t\tawait AsyncStorage.removeItem('token'); // Remove token client-side\n\t\tconst response = await fetch(`${API_URL}/logout`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetCurrentUser: async () => {\n\t\tconst response = await fetch(`${API_URL}/current-user`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetUser: async (id) => {\n\t\tconst response = await fetch(`${API_URL}/user/${id}`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetUsername: async (setUsername) => {\n\t\tconst user = await Database.getCurrentUser();\n\t\tsetUsername && setUsername(user.displayedName);\n\t\treturn user.idUser;\n\t},\n\t\n\tchangeUsername: async (username) => {\n\t\tconst response = await fetch(`${API_URL}/current-user`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ username }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tchangeImage: async (payload) => {\n\t\tconst response = await fetch(`${API_URL}/current-user`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify(payload),\n\t\t})\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\taddPost: async (payload) => {\n\t\ttry {\n\t\t\tconst response = await fetch(`${API_URL}/posts`, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: await authHeaders(),\n\t\t\t\tbody: JSON.stringify(payload),\n\n\t\t\t});\n\n\t\t\tconst responseText = await response.text();\n\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.error('Post error response:', responseText);\n\t\t\t\tthrow new Error(responseText || 'Failed to upload post');\n\t\t\t}\n\n\t\t\treturn JSON.parse(responseText);\n\t\t} catch (error) {\n\t\t\tconsole.error('Network error:', error);\n\t\t\tthrow error;\n\t\t}\n\t},\n\n\tgetAllPosts: async (page) => {\n\t\tconst response = await fetch(`${API_URL}/posts?page=${page}&pageSize=10`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\n\t},\n\n\tgetPost: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/post/${postId}`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tdeletePost: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/posts`, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ postId: postId }),\n\t\t})\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetFollowingPosts: async (page) => {\n\t\tconst response = await fetch(`${API_URL}/following-posts?page=${page}&pageSize=10`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\n\t},\n\n\tgetAllComments: async (page) => {\n\t\tconst response = await fetch(`${API_URL}/comments?page=${page}&pageSize=10`, {\n\t\t\theaders: await authHeaders(),\n\t\t})\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetPostComments: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/post/${postId}/comments`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetPostCommentsCount: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/post/${postId}/comments-count`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\taddComment: async ({ postId, content }) => {\n\t\tconst response = await fetch(`${API_URL}/comments`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ postId, content }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tlikePost: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/like-post`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ postId }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetLikePost: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/like-post?idPost=${postId}`, {\n\t\t\tmethod: 'GET',\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tunlikePost: async (postId) => {\n\t\tconst response = await fetch(`${API_URL}/unlike-post`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ postId }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetCommentLikes: async (commentId) => {\n\t\tconst response = await fetch(`${API_URL}/get-comment-likes`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ commentId }),\n\t\t})\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tlikeComment: async (commentId) => {\n\t\tconst response = await fetch(`${API_URL}/like-comment`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ commentId }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tunlikeComment: async (commentId) => {\n\t\tconst response = await fetch(`${API_URL}/unlike-comment`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ commentId }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tfollowTag: async (tagName) => {\n\t\tconst response = await fetch(`${API_URL}/follow-tag`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ tagName }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tunfollowTag: async (tagName) => {\n\t\tconst response = await fetch(`${API_URL}/unfollow-tag`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: await authHeaders(),\n\t\t\tbody: JSON.stringify({ tagName }),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\tgetFollowedTags: async () => {\n\t\tconst response = await fetch(`${API_URL}/followed-tags`, {\n\t\t\theaders: await authHeaders(),\n\t\t});\n\t\tif (!response.ok) throw new Error(await response.text());\n\t\treturn await response.json();\n\t},\n\n\taddCommentBase64: async ({ postId, content, isAnonymous, imageBase64 }) => {\n\t\tconst token = await AsyncStorage.getItem('token');\n\n\t\tconst payload = {\n\t\t\tpostId,\n\t\t\tcontent,\n\t\t\tisAnonymous,\n\t\t\timageBase64,\n\t\t};\n\n\t\tconst response = await fetch(`${API_URL}/comments`, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify(payload),\n\t\t});\n\n\t\tif (!response.ok) {throw new Error(await response.text());}\n\n\t\tconst result = await response.json();\n\t\treturn result;\n\t},\n};\n\nDatabase.init();\n\nexport default Database;"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}