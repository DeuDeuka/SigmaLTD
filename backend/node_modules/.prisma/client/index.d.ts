
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Nsu
 * 
 */
export type Nsu = $Result.DefaultSelection<Prisma.$NsuPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model UserFollowedTag
 * 
 */
export type UserFollowedTag = $Result.DefaultSelection<Prisma.$UserFollowedTagPayload>
/**
 * Model UserLikedPost
 * 
 */
export type UserLikedPost = $Result.DefaultSelection<Prisma.$UserLikedPostPayload>
/**
 * Model UserLikedComment
 * 
 */
export type UserLikedComment = $Result.DefaultSelection<Prisma.$UserLikedCommentPayload>
/**
 * Model UserViewedPost
 * 
 */
export type UserViewedPost = $Result.DefaultSelection<Prisma.$UserViewedPostPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Nsus
 * const nsus = await prisma.nsu.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Nsus
   * const nsus = await prisma.nsu.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.nsu`: Exposes CRUD operations for the **Nsu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nsus
    * const nsus = await prisma.nsu.findMany()
    * ```
    */
  get nsu(): Prisma.NsuDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userFollowedTag`: Exposes CRUD operations for the **UserFollowedTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFollowedTags
    * const userFollowedTags = await prisma.userFollowedTag.findMany()
    * ```
    */
  get userFollowedTag(): Prisma.UserFollowedTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLikedPost`: Exposes CRUD operations for the **UserLikedPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLikedPosts
    * const userLikedPosts = await prisma.userLikedPost.findMany()
    * ```
    */
  get userLikedPost(): Prisma.UserLikedPostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userLikedComment`: Exposes CRUD operations for the **UserLikedComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserLikedComments
    * const userLikedComments = await prisma.userLikedComment.findMany()
    * ```
    */
  get userLikedComment(): Prisma.UserLikedCommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userViewedPost`: Exposes CRUD operations for the **UserViewedPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserViewedPosts
    * const userViewedPosts = await prisma.userViewedPost.findMany()
    * ```
    */
  get userViewedPost(): Prisma.UserViewedPostDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Nsu: 'Nsu',
    Users: 'Users',
    Post: 'Post',
    Comment: 'Comment',
    Tag: 'Tag',
    UserFollowedTag: 'UserFollowedTag',
    UserLikedPost: 'UserLikedPost',
    UserLikedComment: 'UserLikedComment',
    UserViewedPost: 'UserViewedPost'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "nsu" | "users" | "post" | "comment" | "tag" | "userFollowedTag" | "userLikedPost" | "userLikedComment" | "userViewedPost"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Nsu: {
        payload: Prisma.$NsuPayload<ExtArgs>
        fields: Prisma.NsuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NsuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NsuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          findFirst: {
            args: Prisma.NsuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NsuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          findMany: {
            args: Prisma.NsuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>[]
          }
          create: {
            args: Prisma.NsuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          createMany: {
            args: Prisma.NsuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NsuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          update: {
            args: Prisma.NsuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          deleteMany: {
            args: Prisma.NsuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NsuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NsuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NsuPayload>
          }
          aggregate: {
            args: Prisma.NsuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNsu>
          }
          groupBy: {
            args: Prisma.NsuGroupByArgs<ExtArgs>
            result: $Utils.Optional<NsuGroupByOutputType>[]
          }
          count: {
            args: Prisma.NsuCountArgs<ExtArgs>
            result: $Utils.Optional<NsuCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      UserFollowedTag: {
        payload: Prisma.$UserFollowedTagPayload<ExtArgs>
        fields: Prisma.UserFollowedTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFollowedTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFollowedTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          findFirst: {
            args: Prisma.UserFollowedTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFollowedTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          findMany: {
            args: Prisma.UserFollowedTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>[]
          }
          create: {
            args: Prisma.UserFollowedTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          createMany: {
            args: Prisma.UserFollowedTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserFollowedTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          update: {
            args: Prisma.UserFollowedTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          deleteMany: {
            args: Prisma.UserFollowedTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserFollowedTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserFollowedTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserFollowedTagPayload>
          }
          aggregate: {
            args: Prisma.UserFollowedTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserFollowedTag>
          }
          groupBy: {
            args: Prisma.UserFollowedTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserFollowedTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserFollowedTagCountArgs<ExtArgs>
            result: $Utils.Optional<UserFollowedTagCountAggregateOutputType> | number
          }
        }
      }
      UserLikedPost: {
        payload: Prisma.$UserLikedPostPayload<ExtArgs>
        fields: Prisma.UserLikedPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLikedPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLikedPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          findFirst: {
            args: Prisma.UserLikedPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLikedPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          findMany: {
            args: Prisma.UserLikedPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>[]
          }
          create: {
            args: Prisma.UserLikedPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          createMany: {
            args: Prisma.UserLikedPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserLikedPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          update: {
            args: Prisma.UserLikedPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          deleteMany: {
            args: Prisma.UserLikedPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLikedPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLikedPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedPostPayload>
          }
          aggregate: {
            args: Prisma.UserLikedPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLikedPost>
          }
          groupBy: {
            args: Prisma.UserLikedPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLikedPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLikedPostCountArgs<ExtArgs>
            result: $Utils.Optional<UserLikedPostCountAggregateOutputType> | number
          }
        }
      }
      UserLikedComment: {
        payload: Prisma.$UserLikedCommentPayload<ExtArgs>
        fields: Prisma.UserLikedCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserLikedCommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserLikedCommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          findFirst: {
            args: Prisma.UserLikedCommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserLikedCommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          findMany: {
            args: Prisma.UserLikedCommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>[]
          }
          create: {
            args: Prisma.UserLikedCommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          createMany: {
            args: Prisma.UserLikedCommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserLikedCommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          update: {
            args: Prisma.UserLikedCommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          deleteMany: {
            args: Prisma.UserLikedCommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserLikedCommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserLikedCommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserLikedCommentPayload>
          }
          aggregate: {
            args: Prisma.UserLikedCommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserLikedComment>
          }
          groupBy: {
            args: Prisma.UserLikedCommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserLikedCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserLikedCommentCountArgs<ExtArgs>
            result: $Utils.Optional<UserLikedCommentCountAggregateOutputType> | number
          }
        }
      }
      UserViewedPost: {
        payload: Prisma.$UserViewedPostPayload<ExtArgs>
        fields: Prisma.UserViewedPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserViewedPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserViewedPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          findFirst: {
            args: Prisma.UserViewedPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserViewedPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          findMany: {
            args: Prisma.UserViewedPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>[]
          }
          create: {
            args: Prisma.UserViewedPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          createMany: {
            args: Prisma.UserViewedPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserViewedPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          update: {
            args: Prisma.UserViewedPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          deleteMany: {
            args: Prisma.UserViewedPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserViewedPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserViewedPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserViewedPostPayload>
          }
          aggregate: {
            args: Prisma.UserViewedPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserViewedPost>
          }
          groupBy: {
            args: Prisma.UserViewedPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserViewedPostGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserViewedPostCountArgs<ExtArgs>
            result: $Utils.Optional<UserViewedPostCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    nsu?: NsuOmit
    users?: UsersOmit
    post?: PostOmit
    comment?: CommentOmit
    tag?: TagOmit
    userFollowedTag?: UserFollowedTagOmit
    userLikedPost?: UserLikedPostOmit
    userLikedComment?: UserLikedCommentOmit
    userViewedPost?: UserViewedPostOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    posts: number
    comments: number
    likedPosts: number
    likedComments: number
    viewedPosts: number
    followedTags: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UsersCountOutputTypeCountPostsArgs
    comments?: boolean | UsersCountOutputTypeCountCommentsArgs
    likedPosts?: boolean | UsersCountOutputTypeCountLikedPostsArgs
    likedComments?: boolean | UsersCountOutputTypeCountLikedCommentsArgs
    viewedPosts?: boolean | UsersCountOutputTypeCountViewedPostsArgs
    followedTags?: boolean | UsersCountOutputTypeCountFollowedTagsArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLikedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedPostWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLikedCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedCommentWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountViewedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserViewedPostWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFollowedTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowedTagWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    comments: number
    likedBy: number
    viewedBy: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
    likedBy?: boolean | PostCountOutputTypeCountLikedByArgs
    viewedBy?: boolean | PostCountOutputTypeCountViewedByArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedPostWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountViewedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserViewedPostWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    likedBy: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likedBy?: boolean | CommentCountOutputTypeCountLikedByArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountLikedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedCommentWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    followedBy: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    followedBy?: boolean | TagCountOutputTypeCountFollowedByArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountFollowedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowedTagWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Nsu
   */

  export type AggregateNsu = {
    _count: NsuCountAggregateOutputType | null
    _avg: NsuAvgAggregateOutputType | null
    _sum: NsuSumAggregateOutputType | null
    _min: NsuMinAggregateOutputType | null
    _max: NsuMaxAggregateOutputType | null
  }

  export type NsuAvgAggregateOutputType = {
    idNsuUser: number | null
  }

  export type NsuSumAggregateOutputType = {
    idNsuUser: number | null
  }

  export type NsuMinAggregateOutputType = {
    idNsuUser: number | null
    realName: string | null
    email: string | null
    group: string | null
    hasLogined: boolean | null
  }

  export type NsuMaxAggregateOutputType = {
    idNsuUser: number | null
    realName: string | null
    email: string | null
    group: string | null
    hasLogined: boolean | null
  }

  export type NsuCountAggregateOutputType = {
    idNsuUser: number
    realName: number
    email: number
    group: number
    hasLogined: number
    _all: number
  }


  export type NsuAvgAggregateInputType = {
    idNsuUser?: true
  }

  export type NsuSumAggregateInputType = {
    idNsuUser?: true
  }

  export type NsuMinAggregateInputType = {
    idNsuUser?: true
    realName?: true
    email?: true
    group?: true
    hasLogined?: true
  }

  export type NsuMaxAggregateInputType = {
    idNsuUser?: true
    realName?: true
    email?: true
    group?: true
    hasLogined?: true
  }

  export type NsuCountAggregateInputType = {
    idNsuUser?: true
    realName?: true
    email?: true
    group?: true
    hasLogined?: true
    _all?: true
  }

  export type NsuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nsu to aggregate.
     */
    where?: NsuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nsus to fetch.
     */
    orderBy?: NsuOrderByWithRelationInput | NsuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NsuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nsus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nsus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nsus
    **/
    _count?: true | NsuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NsuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NsuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NsuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NsuMaxAggregateInputType
  }

  export type GetNsuAggregateType<T extends NsuAggregateArgs> = {
        [P in keyof T & keyof AggregateNsu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNsu[P]>
      : GetScalarType<T[P], AggregateNsu[P]>
  }




  export type NsuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NsuWhereInput
    orderBy?: NsuOrderByWithAggregationInput | NsuOrderByWithAggregationInput[]
    by: NsuScalarFieldEnum[] | NsuScalarFieldEnum
    having?: NsuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NsuCountAggregateInputType | true
    _avg?: NsuAvgAggregateInputType
    _sum?: NsuSumAggregateInputType
    _min?: NsuMinAggregateInputType
    _max?: NsuMaxAggregateInputType
  }

  export type NsuGroupByOutputType = {
    idNsuUser: number
    realName: string
    email: string
    group: string
    hasLogined: boolean
    _count: NsuCountAggregateOutputType | null
    _avg: NsuAvgAggregateOutputType | null
    _sum: NsuSumAggregateOutputType | null
    _min: NsuMinAggregateOutputType | null
    _max: NsuMaxAggregateOutputType | null
  }

  type GetNsuGroupByPayload<T extends NsuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NsuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NsuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NsuGroupByOutputType[P]>
            : GetScalarType<T[P], NsuGroupByOutputType[P]>
        }
      >
    >


  export type NsuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idNsuUser?: boolean
    realName?: boolean
    email?: boolean
    group?: boolean
    hasLogined?: boolean
    user?: boolean | Nsu$userArgs<ExtArgs>
  }, ExtArgs["result"]["nsu"]>



  export type NsuSelectScalar = {
    idNsuUser?: boolean
    realName?: boolean
    email?: boolean
    group?: boolean
    hasLogined?: boolean
  }

  export type NsuOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idNsuUser" | "realName" | "email" | "group" | "hasLogined", ExtArgs["result"]["nsu"]>
  export type NsuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Nsu$userArgs<ExtArgs>
  }

  export type $NsuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nsu"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      idNsuUser: number
      realName: string
      email: string
      group: string
      hasLogined: boolean
    }, ExtArgs["result"]["nsu"]>
    composites: {}
  }

  type NsuGetPayload<S extends boolean | null | undefined | NsuDefaultArgs> = $Result.GetResult<Prisma.$NsuPayload, S>

  type NsuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NsuFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NsuCountAggregateInputType | true
    }

  export interface NsuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nsu'], meta: { name: 'Nsu' } }
    /**
     * Find zero or one Nsu that matches the filter.
     * @param {NsuFindUniqueArgs} args - Arguments to find a Nsu
     * @example
     * // Get one Nsu
     * const nsu = await prisma.nsu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NsuFindUniqueArgs>(args: SelectSubset<T, NsuFindUniqueArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Nsu that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NsuFindUniqueOrThrowArgs} args - Arguments to find a Nsu
     * @example
     * // Get one Nsu
     * const nsu = await prisma.nsu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NsuFindUniqueOrThrowArgs>(args: SelectSubset<T, NsuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Nsu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuFindFirstArgs} args - Arguments to find a Nsu
     * @example
     * // Get one Nsu
     * const nsu = await prisma.nsu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NsuFindFirstArgs>(args?: SelectSubset<T, NsuFindFirstArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Nsu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuFindFirstOrThrowArgs} args - Arguments to find a Nsu
     * @example
     * // Get one Nsu
     * const nsu = await prisma.nsu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NsuFindFirstOrThrowArgs>(args?: SelectSubset<T, NsuFindFirstOrThrowArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Nsus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nsus
     * const nsus = await prisma.nsu.findMany()
     * 
     * // Get first 10 Nsus
     * const nsus = await prisma.nsu.findMany({ take: 10 })
     * 
     * // Only select the `idNsuUser`
     * const nsuWithIdNsuUserOnly = await prisma.nsu.findMany({ select: { idNsuUser: true } })
     * 
     */
    findMany<T extends NsuFindManyArgs>(args?: SelectSubset<T, NsuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Nsu.
     * @param {NsuCreateArgs} args - Arguments to create a Nsu.
     * @example
     * // Create one Nsu
     * const Nsu = await prisma.nsu.create({
     *   data: {
     *     // ... data to create a Nsu
     *   }
     * })
     * 
     */
    create<T extends NsuCreateArgs>(args: SelectSubset<T, NsuCreateArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Nsus.
     * @param {NsuCreateManyArgs} args - Arguments to create many Nsus.
     * @example
     * // Create many Nsus
     * const nsu = await prisma.nsu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NsuCreateManyArgs>(args?: SelectSubset<T, NsuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nsu.
     * @param {NsuDeleteArgs} args - Arguments to delete one Nsu.
     * @example
     * // Delete one Nsu
     * const Nsu = await prisma.nsu.delete({
     *   where: {
     *     // ... filter to delete one Nsu
     *   }
     * })
     * 
     */
    delete<T extends NsuDeleteArgs>(args: SelectSubset<T, NsuDeleteArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Nsu.
     * @param {NsuUpdateArgs} args - Arguments to update one Nsu.
     * @example
     * // Update one Nsu
     * const nsu = await prisma.nsu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NsuUpdateArgs>(args: SelectSubset<T, NsuUpdateArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Nsus.
     * @param {NsuDeleteManyArgs} args - Arguments to filter Nsus to delete.
     * @example
     * // Delete a few Nsus
     * const { count } = await prisma.nsu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NsuDeleteManyArgs>(args?: SelectSubset<T, NsuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nsus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nsus
     * const nsu = await prisma.nsu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NsuUpdateManyArgs>(args: SelectSubset<T, NsuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nsu.
     * @param {NsuUpsertArgs} args - Arguments to update or create a Nsu.
     * @example
     * // Update or create a Nsu
     * const nsu = await prisma.nsu.upsert({
     *   create: {
     *     // ... data to create a Nsu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nsu we want to update
     *   }
     * })
     */
    upsert<T extends NsuUpsertArgs>(args: SelectSubset<T, NsuUpsertArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Nsus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuCountArgs} args - Arguments to filter Nsus to count.
     * @example
     * // Count the number of Nsus
     * const count = await prisma.nsu.count({
     *   where: {
     *     // ... the filter for the Nsus we want to count
     *   }
     * })
    **/
    count<T extends NsuCountArgs>(
      args?: Subset<T, NsuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NsuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nsu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NsuAggregateArgs>(args: Subset<T, NsuAggregateArgs>): Prisma.PrismaPromise<GetNsuAggregateType<T>>

    /**
     * Group by Nsu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NsuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NsuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NsuGroupByArgs['orderBy'] }
        : { orderBy?: NsuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NsuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNsuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nsu model
   */
  readonly fields: NsuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nsu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NsuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Nsu$userArgs<ExtArgs> = {}>(args?: Subset<T, Nsu$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nsu model
   */
  interface NsuFieldRefs {
    readonly idNsuUser: FieldRef<"Nsu", 'Int'>
    readonly realName: FieldRef<"Nsu", 'String'>
    readonly email: FieldRef<"Nsu", 'String'>
    readonly group: FieldRef<"Nsu", 'String'>
    readonly hasLogined: FieldRef<"Nsu", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Nsu findUnique
   */
  export type NsuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter, which Nsu to fetch.
     */
    where: NsuWhereUniqueInput
  }

  /**
   * Nsu findUniqueOrThrow
   */
  export type NsuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter, which Nsu to fetch.
     */
    where: NsuWhereUniqueInput
  }

  /**
   * Nsu findFirst
   */
  export type NsuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter, which Nsu to fetch.
     */
    where?: NsuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nsus to fetch.
     */
    orderBy?: NsuOrderByWithRelationInput | NsuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nsus.
     */
    cursor?: NsuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nsus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nsus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nsus.
     */
    distinct?: NsuScalarFieldEnum | NsuScalarFieldEnum[]
  }

  /**
   * Nsu findFirstOrThrow
   */
  export type NsuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter, which Nsu to fetch.
     */
    where?: NsuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nsus to fetch.
     */
    orderBy?: NsuOrderByWithRelationInput | NsuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nsus.
     */
    cursor?: NsuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nsus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nsus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nsus.
     */
    distinct?: NsuScalarFieldEnum | NsuScalarFieldEnum[]
  }

  /**
   * Nsu findMany
   */
  export type NsuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter, which Nsus to fetch.
     */
    where?: NsuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nsus to fetch.
     */
    orderBy?: NsuOrderByWithRelationInput | NsuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nsus.
     */
    cursor?: NsuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nsus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nsus.
     */
    skip?: number
    distinct?: NsuScalarFieldEnum | NsuScalarFieldEnum[]
  }

  /**
   * Nsu create
   */
  export type NsuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * The data needed to create a Nsu.
     */
    data: XOR<NsuCreateInput, NsuUncheckedCreateInput>
  }

  /**
   * Nsu createMany
   */
  export type NsuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nsus.
     */
    data: NsuCreateManyInput | NsuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nsu update
   */
  export type NsuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * The data needed to update a Nsu.
     */
    data: XOR<NsuUpdateInput, NsuUncheckedUpdateInput>
    /**
     * Choose, which Nsu to update.
     */
    where: NsuWhereUniqueInput
  }

  /**
   * Nsu updateMany
   */
  export type NsuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nsus.
     */
    data: XOR<NsuUpdateManyMutationInput, NsuUncheckedUpdateManyInput>
    /**
     * Filter which Nsus to update
     */
    where?: NsuWhereInput
    /**
     * Limit how many Nsus to update.
     */
    limit?: number
  }

  /**
   * Nsu upsert
   */
  export type NsuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * The filter to search for the Nsu to update in case it exists.
     */
    where: NsuWhereUniqueInput
    /**
     * In case the Nsu found by the `where` argument doesn't exist, create a new Nsu with this data.
     */
    create: XOR<NsuCreateInput, NsuUncheckedCreateInput>
    /**
     * In case the Nsu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NsuUpdateInput, NsuUncheckedUpdateInput>
  }

  /**
   * Nsu delete
   */
  export type NsuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    /**
     * Filter which Nsu to delete.
     */
    where: NsuWhereUniqueInput
  }

  /**
   * Nsu deleteMany
   */
  export type NsuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nsus to delete
     */
    where?: NsuWhereInput
    /**
     * Limit how many Nsus to delete.
     */
    limit?: number
  }

  /**
   * Nsu.user
   */
  export type Nsu$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }

  /**
   * Nsu without action
   */
  export type NsuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
  }


  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    idUser: number | null
  }

  export type UsersSumAggregateOutputType = {
    idUser: number | null
  }

  export type UsersMinAggregateOutputType = {
    idUser: number | null
    displayedName: string | null
    pic: string | null
    admin: boolean | null
    password: string | null
  }

  export type UsersMaxAggregateOutputType = {
    idUser: number | null
    displayedName: string | null
    pic: string | null
    admin: boolean | null
    password: string | null
  }

  export type UsersCountAggregateOutputType = {
    idUser: number
    displayedName: number
    pic: number
    admin: number
    password: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    idUser?: true
  }

  export type UsersSumAggregateInputType = {
    idUser?: true
  }

  export type UsersMinAggregateInputType = {
    idUser?: true
    displayedName?: true
    pic?: true
    admin?: true
    password?: true
  }

  export type UsersMaxAggregateInputType = {
    idUser?: true
    displayedName?: true
    pic?: true
    admin?: true
    password?: true
  }

  export type UsersCountAggregateInputType = {
    idUser?: true
    displayedName?: true
    pic?: true
    admin?: true
    password?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    idUser: number
    displayedName: string
    pic: string | null
    admin: boolean
    password: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    displayedName?: boolean
    pic?: boolean
    admin?: boolean
    password?: boolean
    nsu?: boolean | Users$nsuArgs<ExtArgs>
    posts?: boolean | Users$postsArgs<ExtArgs>
    comments?: boolean | Users$commentsArgs<ExtArgs>
    likedPosts?: boolean | Users$likedPostsArgs<ExtArgs>
    likedComments?: boolean | Users$likedCommentsArgs<ExtArgs>
    viewedPosts?: boolean | Users$viewedPostsArgs<ExtArgs>
    followedTags?: boolean | Users$followedTagsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type UsersSelectScalar = {
    idUser?: boolean
    displayedName?: boolean
    pic?: boolean
    admin?: boolean
    password?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "displayedName" | "pic" | "admin" | "password", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nsu?: boolean | Users$nsuArgs<ExtArgs>
    posts?: boolean | Users$postsArgs<ExtArgs>
    comments?: boolean | Users$commentsArgs<ExtArgs>
    likedPosts?: boolean | Users$likedPostsArgs<ExtArgs>
    likedComments?: boolean | Users$likedCommentsArgs<ExtArgs>
    viewedPosts?: boolean | Users$viewedPostsArgs<ExtArgs>
    followedTags?: boolean | Users$followedTagsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      nsu: Prisma.$NsuPayload<ExtArgs> | null
      posts: Prisma.$PostPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likedPosts: Prisma.$UserLikedPostPayload<ExtArgs>[]
      likedComments: Prisma.$UserLikedCommentPayload<ExtArgs>[]
      viewedPosts: Prisma.$UserViewedPostPayload<ExtArgs>[]
      followedTags: Prisma.$UserFollowedTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      displayedName: string
      pic: string | null
      admin: boolean
      password: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const usersWithIdUserOnly = await prisma.users.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nsu<T extends Users$nsuArgs<ExtArgs> = {}>(args?: Subset<T, Users$nsuArgs<ExtArgs>>): Prisma__NsuClient<$Result.GetResult<Prisma.$NsuPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    posts<T extends Users$postsArgs<ExtArgs> = {}>(args?: Subset<T, Users$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends Users$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likedPosts<T extends Users$likedPostsArgs<ExtArgs> = {}>(args?: Subset<T, Users$likedPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likedComments<T extends Users$likedCommentsArgs<ExtArgs> = {}>(args?: Subset<T, Users$likedCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    viewedPosts<T extends Users$viewedPostsArgs<ExtArgs> = {}>(args?: Subset<T, Users$viewedPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followedTags<T extends Users$followedTagsArgs<ExtArgs> = {}>(args?: Subset<T, Users$followedTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly idUser: FieldRef<"Users", 'Int'>
    readonly displayedName: FieldRef<"Users", 'String'>
    readonly pic: FieldRef<"Users", 'String'>
    readonly admin: FieldRef<"Users", 'Boolean'>
    readonly password: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.nsu
   */
  export type Users$nsuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nsu
     */
    select?: NsuSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Nsu
     */
    omit?: NsuOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NsuInclude<ExtArgs> | null
    where?: NsuWhereInput
  }

  /**
   * Users.posts
   */
  export type Users$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Users.comments
   */
  export type Users$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Users.likedPosts
   */
  export type Users$likedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    where?: UserLikedPostWhereInput
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    cursor?: UserLikedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikedPostScalarFieldEnum | UserLikedPostScalarFieldEnum[]
  }

  /**
   * Users.likedComments
   */
  export type Users$likedCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    where?: UserLikedCommentWhereInput
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    cursor?: UserLikedCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikedCommentScalarFieldEnum | UserLikedCommentScalarFieldEnum[]
  }

  /**
   * Users.viewedPosts
   */
  export type Users$viewedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    where?: UserViewedPostWhereInput
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    cursor?: UserViewedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserViewedPostScalarFieldEnum | UserViewedPostScalarFieldEnum[]
  }

  /**
   * Users.followedTags
   */
  export type Users$followedTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    where?: UserFollowedTagWhereInput
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    cursor?: UserFollowedTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFollowedTagScalarFieldEnum | UserFollowedTagScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    idPost: number | null
    views: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type PostSumAggregateOutputType = {
    idPost: number | null
    views: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type PostMinAggregateOutputType = {
    idPost: number | null
    content: string | null
    images: string | null
    tags: string | null
    createdAt: Date | null
    views: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type PostMaxAggregateOutputType = {
    idPost: number | null
    content: string | null
    images: string | null
    tags: string | null
    createdAt: Date | null
    views: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type PostCountAggregateOutputType = {
    idPost: number
    content: number
    images: number
    tags: number
    createdAt: number
    views: number
    likes: number
    createdByIdUser: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    idPost?: true
    views?: true
    likes?: true
    createdByIdUser?: true
  }

  export type PostSumAggregateInputType = {
    idPost?: true
    views?: true
    likes?: true
    createdByIdUser?: true
  }

  export type PostMinAggregateInputType = {
    idPost?: true
    content?: true
    images?: true
    tags?: true
    createdAt?: true
    views?: true
    likes?: true
    createdByIdUser?: true
  }

  export type PostMaxAggregateInputType = {
    idPost?: true
    content?: true
    images?: true
    tags?: true
    createdAt?: true
    views?: true
    likes?: true
    createdByIdUser?: true
  }

  export type PostCountAggregateInputType = {
    idPost?: true
    content?: true
    images?: true
    tags?: true
    createdAt?: true
    views?: true
    likes?: true
    createdByIdUser?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    idPost: number
    content: string
    images: string | null
    tags: string | null
    createdAt: Date
    views: number
    likes: number
    createdByIdUser: number
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idPost?: boolean
    content?: boolean
    images?: boolean
    tags?: boolean
    createdAt?: boolean
    views?: boolean
    likes?: boolean
    createdByIdUser?: boolean
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likedBy?: boolean | Post$likedByArgs<ExtArgs>
    viewedBy?: boolean | Post$viewedByArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>



  export type PostSelectScalar = {
    idPost?: boolean
    content?: boolean
    images?: boolean
    tags?: boolean
    createdAt?: boolean
    views?: boolean
    likes?: boolean
    createdByIdUser?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idPost" | "content" | "images" | "tags" | "createdAt" | "views" | "likes" | "createdByIdUser", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likedBy?: boolean | Post$likedByArgs<ExtArgs>
    viewedBy?: boolean | Post$viewedByArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      createdBy: Prisma.$UsersPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likedBy: Prisma.$UserLikedPostPayload<ExtArgs>[]
      viewedBy: Prisma.$UserViewedPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idPost: number
      content: string
      images: string | null
      tags: string | null
      createdAt: Date
      views: number
      likes: number
      createdByIdUser: number
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `idPost`
     * const postWithIdPostOnly = await prisma.post.findMany({ select: { idPost: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likedBy<T extends Post$likedByArgs<ExtArgs> = {}>(args?: Subset<T, Post$likedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    viewedBy<T extends Post$viewedByArgs<ExtArgs> = {}>(args?: Subset<T, Post$viewedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly idPost: FieldRef<"Post", 'Int'>
    readonly content: FieldRef<"Post", 'String'>
    readonly images: FieldRef<"Post", 'String'>
    readonly tags: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly views: FieldRef<"Post", 'Int'>
    readonly likes: FieldRef<"Post", 'Int'>
    readonly createdByIdUser: FieldRef<"Post", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Post.likedBy
   */
  export type Post$likedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    where?: UserLikedPostWhereInput
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    cursor?: UserLikedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikedPostScalarFieldEnum | UserLikedPostScalarFieldEnum[]
  }

  /**
   * Post.viewedBy
   */
  export type Post$viewedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    where?: UserViewedPostWhereInput
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    cursor?: UserViewedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserViewedPostScalarFieldEnum | UserViewedPostScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    idComment: number | null
    commentIdPost: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type CommentSumAggregateOutputType = {
    idComment: number | null
    commentIdPost: number | null
    likes: number | null
    createdByIdUser: number | null
  }

  export type CommentMinAggregateOutputType = {
    idComment: number | null
    commentIdPost: number | null
    text: string | null
    images: string | null
    likes: number | null
    createdAt: Date | null
    createdByIdUser: number | null
  }

  export type CommentMaxAggregateOutputType = {
    idComment: number | null
    commentIdPost: number | null
    text: string | null
    images: string | null
    likes: number | null
    createdAt: Date | null
    createdByIdUser: number | null
  }

  export type CommentCountAggregateOutputType = {
    idComment: number
    commentIdPost: number
    text: number
    images: number
    likes: number
    createdAt: number
    createdByIdUser: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    idComment?: true
    commentIdPost?: true
    likes?: true
    createdByIdUser?: true
  }

  export type CommentSumAggregateInputType = {
    idComment?: true
    commentIdPost?: true
    likes?: true
    createdByIdUser?: true
  }

  export type CommentMinAggregateInputType = {
    idComment?: true
    commentIdPost?: true
    text?: true
    images?: true
    likes?: true
    createdAt?: true
    createdByIdUser?: true
  }

  export type CommentMaxAggregateInputType = {
    idComment?: true
    commentIdPost?: true
    text?: true
    images?: true
    likes?: true
    createdAt?: true
    createdByIdUser?: true
  }

  export type CommentCountAggregateInputType = {
    idComment?: true
    commentIdPost?: true
    text?: true
    images?: true
    likes?: true
    createdAt?: true
    createdByIdUser?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    idComment: number
    commentIdPost: number
    text: string
    images: string | null
    likes: number
    createdAt: Date
    createdByIdUser: number
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idComment?: boolean
    commentIdPost?: boolean
    text?: boolean
    images?: boolean
    likes?: boolean
    createdAt?: boolean
    createdByIdUser?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    likedBy?: boolean | Comment$likedByArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>



  export type CommentSelectScalar = {
    idComment?: boolean
    commentIdPost?: boolean
    text?: boolean
    images?: boolean
    likes?: boolean
    createdAt?: boolean
    createdByIdUser?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idComment" | "commentIdPost" | "text" | "images" | "likes" | "createdAt" | "createdByIdUser", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    createdBy?: boolean | UsersDefaultArgs<ExtArgs>
    likedBy?: boolean | Comment$likedByArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      createdBy: Prisma.$UsersPayload<ExtArgs>
      likedBy: Prisma.$UserLikedCommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idComment: number
      commentIdPost: number
      text: string
      images: string | null
      likes: number
      createdAt: Date
      createdByIdUser: number
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `idComment`
     * const commentWithIdCommentOnly = await prisma.comment.findMany({ select: { idComment: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    likedBy<T extends Comment$likedByArgs<ExtArgs> = {}>(args?: Subset<T, Comment$likedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly idComment: FieldRef<"Comment", 'Int'>
    readonly commentIdPost: FieldRef<"Comment", 'Int'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly images: FieldRef<"Comment", 'String'>
    readonly likes: FieldRef<"Comment", 'Int'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly createdByIdUser: FieldRef<"Comment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment.likedBy
   */
  export type Comment$likedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    where?: UserLikedCommentWhereInput
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    cursor?: UserLikedCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserLikedCommentScalarFieldEnum | UserLikedCommentScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagAvgAggregateOutputType = {
    idTag: number | null
  }

  export type TagSumAggregateOutputType = {
    idTag: number | null
  }

  export type TagMinAggregateOutputType = {
    idTag: number | null
    name: string | null
  }

  export type TagMaxAggregateOutputType = {
    idTag: number | null
    name: string | null
  }

  export type TagCountAggregateOutputType = {
    idTag: number
    name: number
    _all: number
  }


  export type TagAvgAggregateInputType = {
    idTag?: true
  }

  export type TagSumAggregateInputType = {
    idTag?: true
  }

  export type TagMinAggregateInputType = {
    idTag?: true
    name?: true
  }

  export type TagMaxAggregateInputType = {
    idTag?: true
    name?: true
  }

  export type TagCountAggregateInputType = {
    idTag?: true
    name?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _avg?: TagAvgAggregateInputType
    _sum?: TagSumAggregateInputType
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    idTag: number
    name: string
    _count: TagCountAggregateOutputType | null
    _avg: TagAvgAggregateOutputType | null
    _sum: TagSumAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idTag?: boolean
    name?: boolean
    followedBy?: boolean | Tag$followedByArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>



  export type TagSelectScalar = {
    idTag?: boolean
    name?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idTag" | "name", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    followedBy?: boolean | Tag$followedByArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      followedBy: Prisma.$UserFollowedTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idTag: number
      name: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `idTag`
     * const tagWithIdTagOnly = await prisma.tag.findMany({ select: { idTag: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    followedBy<T extends Tag$followedByArgs<ExtArgs> = {}>(args?: Subset<T, Tag$followedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly idTag: FieldRef<"Tag", 'Int'>
    readonly name: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag.followedBy
   */
  export type Tag$followedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    where?: UserFollowedTagWhereInput
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    cursor?: UserFollowedTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserFollowedTagScalarFieldEnum | UserFollowedTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model UserFollowedTag
   */

  export type AggregateUserFollowedTag = {
    _count: UserFollowedTagCountAggregateOutputType | null
    _avg: UserFollowedTagAvgAggregateOutputType | null
    _sum: UserFollowedTagSumAggregateOutputType | null
    _min: UserFollowedTagMinAggregateOutputType | null
    _max: UserFollowedTagMaxAggregateOutputType | null
  }

  export type UserFollowedTagAvgAggregateOutputType = {
    idUser: number | null
    idTag: number | null
  }

  export type UserFollowedTagSumAggregateOutputType = {
    idUser: number | null
    idTag: number | null
  }

  export type UserFollowedTagMinAggregateOutputType = {
    idUser: number | null
    idTag: number | null
  }

  export type UserFollowedTagMaxAggregateOutputType = {
    idUser: number | null
    idTag: number | null
  }

  export type UserFollowedTagCountAggregateOutputType = {
    idUser: number
    idTag: number
    _all: number
  }


  export type UserFollowedTagAvgAggregateInputType = {
    idUser?: true
    idTag?: true
  }

  export type UserFollowedTagSumAggregateInputType = {
    idUser?: true
    idTag?: true
  }

  export type UserFollowedTagMinAggregateInputType = {
    idUser?: true
    idTag?: true
  }

  export type UserFollowedTagMaxAggregateInputType = {
    idUser?: true
    idTag?: true
  }

  export type UserFollowedTagCountAggregateInputType = {
    idUser?: true
    idTag?: true
    _all?: true
  }

  export type UserFollowedTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFollowedTag to aggregate.
     */
    where?: UserFollowedTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollowedTags to fetch.
     */
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserFollowedTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollowedTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollowedTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFollowedTags
    **/
    _count?: true | UserFollowedTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFollowedTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFollowedTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFollowedTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFollowedTagMaxAggregateInputType
  }

  export type GetUserFollowedTagAggregateType<T extends UserFollowedTagAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFollowedTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFollowedTag[P]>
      : GetScalarType<T[P], AggregateUserFollowedTag[P]>
  }




  export type UserFollowedTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserFollowedTagWhereInput
    orderBy?: UserFollowedTagOrderByWithAggregationInput | UserFollowedTagOrderByWithAggregationInput[]
    by: UserFollowedTagScalarFieldEnum[] | UserFollowedTagScalarFieldEnum
    having?: UserFollowedTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFollowedTagCountAggregateInputType | true
    _avg?: UserFollowedTagAvgAggregateInputType
    _sum?: UserFollowedTagSumAggregateInputType
    _min?: UserFollowedTagMinAggregateInputType
    _max?: UserFollowedTagMaxAggregateInputType
  }

  export type UserFollowedTagGroupByOutputType = {
    idUser: number
    idTag: number
    _count: UserFollowedTagCountAggregateOutputType | null
    _avg: UserFollowedTagAvgAggregateOutputType | null
    _sum: UserFollowedTagSumAggregateOutputType | null
    _min: UserFollowedTagMinAggregateOutputType | null
    _max: UserFollowedTagMaxAggregateOutputType | null
  }

  type GetUserFollowedTagGroupByPayload<T extends UserFollowedTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserFollowedTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFollowedTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFollowedTagGroupByOutputType[P]>
            : GetScalarType<T[P], UserFollowedTagGroupByOutputType[P]>
        }
      >
    >


  export type UserFollowedTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    idTag?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userFollowedTag"]>



  export type UserFollowedTagSelectScalar = {
    idUser?: boolean
    idTag?: boolean
  }

  export type UserFollowedTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "idTag", ExtArgs["result"]["userFollowedTag"]>
  export type UserFollowedTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $UserFollowedTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserFollowedTag"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      idTag: number
    }, ExtArgs["result"]["userFollowedTag"]>
    composites: {}
  }

  type UserFollowedTagGetPayload<S extends boolean | null | undefined | UserFollowedTagDefaultArgs> = $Result.GetResult<Prisma.$UserFollowedTagPayload, S>

  type UserFollowedTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFollowedTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserFollowedTagCountAggregateInputType | true
    }

  export interface UserFollowedTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserFollowedTag'], meta: { name: 'UserFollowedTag' } }
    /**
     * Find zero or one UserFollowedTag that matches the filter.
     * @param {UserFollowedTagFindUniqueArgs} args - Arguments to find a UserFollowedTag
     * @example
     * // Get one UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFollowedTagFindUniqueArgs>(args: SelectSubset<T, UserFollowedTagFindUniqueArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserFollowedTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFollowedTagFindUniqueOrThrowArgs} args - Arguments to find a UserFollowedTag
     * @example
     * // Get one UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFollowedTagFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFollowedTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFollowedTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagFindFirstArgs} args - Arguments to find a UserFollowedTag
     * @example
     * // Get one UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFollowedTagFindFirstArgs>(args?: SelectSubset<T, UserFollowedTagFindFirstArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserFollowedTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagFindFirstOrThrowArgs} args - Arguments to find a UserFollowedTag
     * @example
     * // Get one UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFollowedTagFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFollowedTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserFollowedTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFollowedTags
     * const userFollowedTags = await prisma.userFollowedTag.findMany()
     * 
     * // Get first 10 UserFollowedTags
     * const userFollowedTags = await prisma.userFollowedTag.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userFollowedTagWithIdUserOnly = await prisma.userFollowedTag.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UserFollowedTagFindManyArgs>(args?: SelectSubset<T, UserFollowedTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserFollowedTag.
     * @param {UserFollowedTagCreateArgs} args - Arguments to create a UserFollowedTag.
     * @example
     * // Create one UserFollowedTag
     * const UserFollowedTag = await prisma.userFollowedTag.create({
     *   data: {
     *     // ... data to create a UserFollowedTag
     *   }
     * })
     * 
     */
    create<T extends UserFollowedTagCreateArgs>(args: SelectSubset<T, UserFollowedTagCreateArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserFollowedTags.
     * @param {UserFollowedTagCreateManyArgs} args - Arguments to create many UserFollowedTags.
     * @example
     * // Create many UserFollowedTags
     * const userFollowedTag = await prisma.userFollowedTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserFollowedTagCreateManyArgs>(args?: SelectSubset<T, UserFollowedTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserFollowedTag.
     * @param {UserFollowedTagDeleteArgs} args - Arguments to delete one UserFollowedTag.
     * @example
     * // Delete one UserFollowedTag
     * const UserFollowedTag = await prisma.userFollowedTag.delete({
     *   where: {
     *     // ... filter to delete one UserFollowedTag
     *   }
     * })
     * 
     */
    delete<T extends UserFollowedTagDeleteArgs>(args: SelectSubset<T, UserFollowedTagDeleteArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserFollowedTag.
     * @param {UserFollowedTagUpdateArgs} args - Arguments to update one UserFollowedTag.
     * @example
     * // Update one UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserFollowedTagUpdateArgs>(args: SelectSubset<T, UserFollowedTagUpdateArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserFollowedTags.
     * @param {UserFollowedTagDeleteManyArgs} args - Arguments to filter UserFollowedTags to delete.
     * @example
     * // Delete a few UserFollowedTags
     * const { count } = await prisma.userFollowedTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserFollowedTagDeleteManyArgs>(args?: SelectSubset<T, UserFollowedTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFollowedTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFollowedTags
     * const userFollowedTag = await prisma.userFollowedTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserFollowedTagUpdateManyArgs>(args: SelectSubset<T, UserFollowedTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFollowedTag.
     * @param {UserFollowedTagUpsertArgs} args - Arguments to update or create a UserFollowedTag.
     * @example
     * // Update or create a UserFollowedTag
     * const userFollowedTag = await prisma.userFollowedTag.upsert({
     *   create: {
     *     // ... data to create a UserFollowedTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFollowedTag we want to update
     *   }
     * })
     */
    upsert<T extends UserFollowedTagUpsertArgs>(args: SelectSubset<T, UserFollowedTagUpsertArgs<ExtArgs>>): Prisma__UserFollowedTagClient<$Result.GetResult<Prisma.$UserFollowedTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserFollowedTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagCountArgs} args - Arguments to filter UserFollowedTags to count.
     * @example
     * // Count the number of UserFollowedTags
     * const count = await prisma.userFollowedTag.count({
     *   where: {
     *     // ... the filter for the UserFollowedTags we want to count
     *   }
     * })
    **/
    count<T extends UserFollowedTagCountArgs>(
      args?: Subset<T, UserFollowedTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFollowedTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFollowedTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFollowedTagAggregateArgs>(args: Subset<T, UserFollowedTagAggregateArgs>): Prisma.PrismaPromise<GetUserFollowedTagAggregateType<T>>

    /**
     * Group by UserFollowedTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFollowedTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFollowedTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFollowedTagGroupByArgs['orderBy'] }
        : { orderBy?: UserFollowedTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFollowedTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFollowedTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserFollowedTag model
   */
  readonly fields: UserFollowedTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFollowedTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserFollowedTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserFollowedTag model
   */
  interface UserFollowedTagFieldRefs {
    readonly idUser: FieldRef<"UserFollowedTag", 'Int'>
    readonly idTag: FieldRef<"UserFollowedTag", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserFollowedTag findUnique
   */
  export type UserFollowedTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter, which UserFollowedTag to fetch.
     */
    where: UserFollowedTagWhereUniqueInput
  }

  /**
   * UserFollowedTag findUniqueOrThrow
   */
  export type UserFollowedTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter, which UserFollowedTag to fetch.
     */
    where: UserFollowedTagWhereUniqueInput
  }

  /**
   * UserFollowedTag findFirst
   */
  export type UserFollowedTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter, which UserFollowedTag to fetch.
     */
    where?: UserFollowedTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollowedTags to fetch.
     */
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFollowedTags.
     */
    cursor?: UserFollowedTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollowedTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollowedTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFollowedTags.
     */
    distinct?: UserFollowedTagScalarFieldEnum | UserFollowedTagScalarFieldEnum[]
  }

  /**
   * UserFollowedTag findFirstOrThrow
   */
  export type UserFollowedTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter, which UserFollowedTag to fetch.
     */
    where?: UserFollowedTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollowedTags to fetch.
     */
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFollowedTags.
     */
    cursor?: UserFollowedTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollowedTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollowedTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFollowedTags.
     */
    distinct?: UserFollowedTagScalarFieldEnum | UserFollowedTagScalarFieldEnum[]
  }

  /**
   * UserFollowedTag findMany
   */
  export type UserFollowedTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter, which UserFollowedTags to fetch.
     */
    where?: UserFollowedTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFollowedTags to fetch.
     */
    orderBy?: UserFollowedTagOrderByWithRelationInput | UserFollowedTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFollowedTags.
     */
    cursor?: UserFollowedTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFollowedTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFollowedTags.
     */
    skip?: number
    distinct?: UserFollowedTagScalarFieldEnum | UserFollowedTagScalarFieldEnum[]
  }

  /**
   * UserFollowedTag create
   */
  export type UserFollowedTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * The data needed to create a UserFollowedTag.
     */
    data: XOR<UserFollowedTagCreateInput, UserFollowedTagUncheckedCreateInput>
  }

  /**
   * UserFollowedTag createMany
   */
  export type UserFollowedTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserFollowedTags.
     */
    data: UserFollowedTagCreateManyInput | UserFollowedTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserFollowedTag update
   */
  export type UserFollowedTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * The data needed to update a UserFollowedTag.
     */
    data: XOR<UserFollowedTagUpdateInput, UserFollowedTagUncheckedUpdateInput>
    /**
     * Choose, which UserFollowedTag to update.
     */
    where: UserFollowedTagWhereUniqueInput
  }

  /**
   * UserFollowedTag updateMany
   */
  export type UserFollowedTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserFollowedTags.
     */
    data: XOR<UserFollowedTagUpdateManyMutationInput, UserFollowedTagUncheckedUpdateManyInput>
    /**
     * Filter which UserFollowedTags to update
     */
    where?: UserFollowedTagWhereInput
    /**
     * Limit how many UserFollowedTags to update.
     */
    limit?: number
  }

  /**
   * UserFollowedTag upsert
   */
  export type UserFollowedTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * The filter to search for the UserFollowedTag to update in case it exists.
     */
    where: UserFollowedTagWhereUniqueInput
    /**
     * In case the UserFollowedTag found by the `where` argument doesn't exist, create a new UserFollowedTag with this data.
     */
    create: XOR<UserFollowedTagCreateInput, UserFollowedTagUncheckedCreateInput>
    /**
     * In case the UserFollowedTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserFollowedTagUpdateInput, UserFollowedTagUncheckedUpdateInput>
  }

  /**
   * UserFollowedTag delete
   */
  export type UserFollowedTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
    /**
     * Filter which UserFollowedTag to delete.
     */
    where: UserFollowedTagWhereUniqueInput
  }

  /**
   * UserFollowedTag deleteMany
   */
  export type UserFollowedTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserFollowedTags to delete
     */
    where?: UserFollowedTagWhereInput
    /**
     * Limit how many UserFollowedTags to delete.
     */
    limit?: number
  }

  /**
   * UserFollowedTag without action
   */
  export type UserFollowedTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserFollowedTag
     */
    select?: UserFollowedTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserFollowedTag
     */
    omit?: UserFollowedTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserFollowedTagInclude<ExtArgs> | null
  }


  /**
   * Model UserLikedPost
   */

  export type AggregateUserLikedPost = {
    _count: UserLikedPostCountAggregateOutputType | null
    _avg: UserLikedPostAvgAggregateOutputType | null
    _sum: UserLikedPostSumAggregateOutputType | null
    _min: UserLikedPostMinAggregateOutputType | null
    _max: UserLikedPostMaxAggregateOutputType | null
  }

  export type UserLikedPostAvgAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserLikedPostSumAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserLikedPostMinAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserLikedPostMaxAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserLikedPostCountAggregateOutputType = {
    idUser: number
    idPost: number
    _all: number
  }


  export type UserLikedPostAvgAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserLikedPostSumAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserLikedPostMinAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserLikedPostMaxAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserLikedPostCountAggregateInputType = {
    idUser?: true
    idPost?: true
    _all?: true
  }

  export type UserLikedPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLikedPost to aggregate.
     */
    where?: UserLikedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedPosts to fetch.
     */
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLikedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLikedPosts
    **/
    _count?: true | UserLikedPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLikedPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLikedPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLikedPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLikedPostMaxAggregateInputType
  }

  export type GetUserLikedPostAggregateType<T extends UserLikedPostAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLikedPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLikedPost[P]>
      : GetScalarType<T[P], AggregateUserLikedPost[P]>
  }




  export type UserLikedPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedPostWhereInput
    orderBy?: UserLikedPostOrderByWithAggregationInput | UserLikedPostOrderByWithAggregationInput[]
    by: UserLikedPostScalarFieldEnum[] | UserLikedPostScalarFieldEnum
    having?: UserLikedPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLikedPostCountAggregateInputType | true
    _avg?: UserLikedPostAvgAggregateInputType
    _sum?: UserLikedPostSumAggregateInputType
    _min?: UserLikedPostMinAggregateInputType
    _max?: UserLikedPostMaxAggregateInputType
  }

  export type UserLikedPostGroupByOutputType = {
    idUser: number
    idPost: number
    _count: UserLikedPostCountAggregateOutputType | null
    _avg: UserLikedPostAvgAggregateOutputType | null
    _sum: UserLikedPostSumAggregateOutputType | null
    _min: UserLikedPostMinAggregateOutputType | null
    _max: UserLikedPostMaxAggregateOutputType | null
  }

  type GetUserLikedPostGroupByPayload<T extends UserLikedPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLikedPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLikedPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLikedPostGroupByOutputType[P]>
            : GetScalarType<T[P], UserLikedPostGroupByOutputType[P]>
        }
      >
    >


  export type UserLikedPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    idPost?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLikedPost"]>



  export type UserLikedPostSelectScalar = {
    idUser?: boolean
    idPost?: boolean
  }

  export type UserLikedPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "idPost", ExtArgs["result"]["userLikedPost"]>
  export type UserLikedPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $UserLikedPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLikedPost"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      idPost: number
    }, ExtArgs["result"]["userLikedPost"]>
    composites: {}
  }

  type UserLikedPostGetPayload<S extends boolean | null | undefined | UserLikedPostDefaultArgs> = $Result.GetResult<Prisma.$UserLikedPostPayload, S>

  type UserLikedPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLikedPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLikedPostCountAggregateInputType | true
    }

  export interface UserLikedPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLikedPost'], meta: { name: 'UserLikedPost' } }
    /**
     * Find zero or one UserLikedPost that matches the filter.
     * @param {UserLikedPostFindUniqueArgs} args - Arguments to find a UserLikedPost
     * @example
     * // Get one UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLikedPostFindUniqueArgs>(args: SelectSubset<T, UserLikedPostFindUniqueArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLikedPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLikedPostFindUniqueOrThrowArgs} args - Arguments to find a UserLikedPost
     * @example
     * // Get one UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLikedPostFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLikedPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLikedPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostFindFirstArgs} args - Arguments to find a UserLikedPost
     * @example
     * // Get one UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLikedPostFindFirstArgs>(args?: SelectSubset<T, UserLikedPostFindFirstArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLikedPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostFindFirstOrThrowArgs} args - Arguments to find a UserLikedPost
     * @example
     * // Get one UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLikedPostFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLikedPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLikedPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLikedPosts
     * const userLikedPosts = await prisma.userLikedPost.findMany()
     * 
     * // Get first 10 UserLikedPosts
     * const userLikedPosts = await prisma.userLikedPost.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userLikedPostWithIdUserOnly = await prisma.userLikedPost.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UserLikedPostFindManyArgs>(args?: SelectSubset<T, UserLikedPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLikedPost.
     * @param {UserLikedPostCreateArgs} args - Arguments to create a UserLikedPost.
     * @example
     * // Create one UserLikedPost
     * const UserLikedPost = await prisma.userLikedPost.create({
     *   data: {
     *     // ... data to create a UserLikedPost
     *   }
     * })
     * 
     */
    create<T extends UserLikedPostCreateArgs>(args: SelectSubset<T, UserLikedPostCreateArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLikedPosts.
     * @param {UserLikedPostCreateManyArgs} args - Arguments to create many UserLikedPosts.
     * @example
     * // Create many UserLikedPosts
     * const userLikedPost = await prisma.userLikedPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLikedPostCreateManyArgs>(args?: SelectSubset<T, UserLikedPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserLikedPost.
     * @param {UserLikedPostDeleteArgs} args - Arguments to delete one UserLikedPost.
     * @example
     * // Delete one UserLikedPost
     * const UserLikedPost = await prisma.userLikedPost.delete({
     *   where: {
     *     // ... filter to delete one UserLikedPost
     *   }
     * })
     * 
     */
    delete<T extends UserLikedPostDeleteArgs>(args: SelectSubset<T, UserLikedPostDeleteArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLikedPost.
     * @param {UserLikedPostUpdateArgs} args - Arguments to update one UserLikedPost.
     * @example
     * // Update one UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLikedPostUpdateArgs>(args: SelectSubset<T, UserLikedPostUpdateArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLikedPosts.
     * @param {UserLikedPostDeleteManyArgs} args - Arguments to filter UserLikedPosts to delete.
     * @example
     * // Delete a few UserLikedPosts
     * const { count } = await prisma.userLikedPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLikedPostDeleteManyArgs>(args?: SelectSubset<T, UserLikedPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLikedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLikedPosts
     * const userLikedPost = await prisma.userLikedPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLikedPostUpdateManyArgs>(args: SelectSubset<T, UserLikedPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLikedPost.
     * @param {UserLikedPostUpsertArgs} args - Arguments to update or create a UserLikedPost.
     * @example
     * // Update or create a UserLikedPost
     * const userLikedPost = await prisma.userLikedPost.upsert({
     *   create: {
     *     // ... data to create a UserLikedPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLikedPost we want to update
     *   }
     * })
     */
    upsert<T extends UserLikedPostUpsertArgs>(args: SelectSubset<T, UserLikedPostUpsertArgs<ExtArgs>>): Prisma__UserLikedPostClient<$Result.GetResult<Prisma.$UserLikedPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLikedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostCountArgs} args - Arguments to filter UserLikedPosts to count.
     * @example
     * // Count the number of UserLikedPosts
     * const count = await prisma.userLikedPost.count({
     *   where: {
     *     // ... the filter for the UserLikedPosts we want to count
     *   }
     * })
    **/
    count<T extends UserLikedPostCountArgs>(
      args?: Subset<T, UserLikedPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLikedPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLikedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLikedPostAggregateArgs>(args: Subset<T, UserLikedPostAggregateArgs>): Prisma.PrismaPromise<GetUserLikedPostAggregateType<T>>

    /**
     * Group by UserLikedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLikedPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLikedPostGroupByArgs['orderBy'] }
        : { orderBy?: UserLikedPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLikedPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLikedPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLikedPost model
   */
  readonly fields: UserLikedPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLikedPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLikedPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLikedPost model
   */
  interface UserLikedPostFieldRefs {
    readonly idUser: FieldRef<"UserLikedPost", 'Int'>
    readonly idPost: FieldRef<"UserLikedPost", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserLikedPost findUnique
   */
  export type UserLikedPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedPost to fetch.
     */
    where: UserLikedPostWhereUniqueInput
  }

  /**
   * UserLikedPost findUniqueOrThrow
   */
  export type UserLikedPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedPost to fetch.
     */
    where: UserLikedPostWhereUniqueInput
  }

  /**
   * UserLikedPost findFirst
   */
  export type UserLikedPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedPost to fetch.
     */
    where?: UserLikedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedPosts to fetch.
     */
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikedPosts.
     */
    cursor?: UserLikedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikedPosts.
     */
    distinct?: UserLikedPostScalarFieldEnum | UserLikedPostScalarFieldEnum[]
  }

  /**
   * UserLikedPost findFirstOrThrow
   */
  export type UserLikedPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedPost to fetch.
     */
    where?: UserLikedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedPosts to fetch.
     */
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikedPosts.
     */
    cursor?: UserLikedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikedPosts.
     */
    distinct?: UserLikedPostScalarFieldEnum | UserLikedPostScalarFieldEnum[]
  }

  /**
   * UserLikedPost findMany
   */
  export type UserLikedPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedPosts to fetch.
     */
    where?: UserLikedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedPosts to fetch.
     */
    orderBy?: UserLikedPostOrderByWithRelationInput | UserLikedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLikedPosts.
     */
    cursor?: UserLikedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedPosts.
     */
    skip?: number
    distinct?: UserLikedPostScalarFieldEnum | UserLikedPostScalarFieldEnum[]
  }

  /**
   * UserLikedPost create
   */
  export type UserLikedPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLikedPost.
     */
    data: XOR<UserLikedPostCreateInput, UserLikedPostUncheckedCreateInput>
  }

  /**
   * UserLikedPost createMany
   */
  export type UserLikedPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLikedPosts.
     */
    data: UserLikedPostCreateManyInput | UserLikedPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLikedPost update
   */
  export type UserLikedPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLikedPost.
     */
    data: XOR<UserLikedPostUpdateInput, UserLikedPostUncheckedUpdateInput>
    /**
     * Choose, which UserLikedPost to update.
     */
    where: UserLikedPostWhereUniqueInput
  }

  /**
   * UserLikedPost updateMany
   */
  export type UserLikedPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLikedPosts.
     */
    data: XOR<UserLikedPostUpdateManyMutationInput, UserLikedPostUncheckedUpdateManyInput>
    /**
     * Filter which UserLikedPosts to update
     */
    where?: UserLikedPostWhereInput
    /**
     * Limit how many UserLikedPosts to update.
     */
    limit?: number
  }

  /**
   * UserLikedPost upsert
   */
  export type UserLikedPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLikedPost to update in case it exists.
     */
    where: UserLikedPostWhereUniqueInput
    /**
     * In case the UserLikedPost found by the `where` argument doesn't exist, create a new UserLikedPost with this data.
     */
    create: XOR<UserLikedPostCreateInput, UserLikedPostUncheckedCreateInput>
    /**
     * In case the UserLikedPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLikedPostUpdateInput, UserLikedPostUncheckedUpdateInput>
  }

  /**
   * UserLikedPost delete
   */
  export type UserLikedPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
    /**
     * Filter which UserLikedPost to delete.
     */
    where: UserLikedPostWhereUniqueInput
  }

  /**
   * UserLikedPost deleteMany
   */
  export type UserLikedPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLikedPosts to delete
     */
    where?: UserLikedPostWhereInput
    /**
     * Limit how many UserLikedPosts to delete.
     */
    limit?: number
  }

  /**
   * UserLikedPost without action
   */
  export type UserLikedPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedPost
     */
    select?: UserLikedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedPost
     */
    omit?: UserLikedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedPostInclude<ExtArgs> | null
  }


  /**
   * Model UserLikedComment
   */

  export type AggregateUserLikedComment = {
    _count: UserLikedCommentCountAggregateOutputType | null
    _avg: UserLikedCommentAvgAggregateOutputType | null
    _sum: UserLikedCommentSumAggregateOutputType | null
    _min: UserLikedCommentMinAggregateOutputType | null
    _max: UserLikedCommentMaxAggregateOutputType | null
  }

  export type UserLikedCommentAvgAggregateOutputType = {
    idUser: number | null
    idComment: number | null
  }

  export type UserLikedCommentSumAggregateOutputType = {
    idUser: number | null
    idComment: number | null
  }

  export type UserLikedCommentMinAggregateOutputType = {
    idUser: number | null
    idComment: number | null
  }

  export type UserLikedCommentMaxAggregateOutputType = {
    idUser: number | null
    idComment: number | null
  }

  export type UserLikedCommentCountAggregateOutputType = {
    idUser: number
    idComment: number
    _all: number
  }


  export type UserLikedCommentAvgAggregateInputType = {
    idUser?: true
    idComment?: true
  }

  export type UserLikedCommentSumAggregateInputType = {
    idUser?: true
    idComment?: true
  }

  export type UserLikedCommentMinAggregateInputType = {
    idUser?: true
    idComment?: true
  }

  export type UserLikedCommentMaxAggregateInputType = {
    idUser?: true
    idComment?: true
  }

  export type UserLikedCommentCountAggregateInputType = {
    idUser?: true
    idComment?: true
    _all?: true
  }

  export type UserLikedCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLikedComment to aggregate.
     */
    where?: UserLikedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedComments to fetch.
     */
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserLikedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserLikedComments
    **/
    _count?: true | UserLikedCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserLikedCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserLikedCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserLikedCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserLikedCommentMaxAggregateInputType
  }

  export type GetUserLikedCommentAggregateType<T extends UserLikedCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserLikedComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserLikedComment[P]>
      : GetScalarType<T[P], AggregateUserLikedComment[P]>
  }




  export type UserLikedCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserLikedCommentWhereInput
    orderBy?: UserLikedCommentOrderByWithAggregationInput | UserLikedCommentOrderByWithAggregationInput[]
    by: UserLikedCommentScalarFieldEnum[] | UserLikedCommentScalarFieldEnum
    having?: UserLikedCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserLikedCommentCountAggregateInputType | true
    _avg?: UserLikedCommentAvgAggregateInputType
    _sum?: UserLikedCommentSumAggregateInputType
    _min?: UserLikedCommentMinAggregateInputType
    _max?: UserLikedCommentMaxAggregateInputType
  }

  export type UserLikedCommentGroupByOutputType = {
    idUser: number
    idComment: number
    _count: UserLikedCommentCountAggregateOutputType | null
    _avg: UserLikedCommentAvgAggregateOutputType | null
    _sum: UserLikedCommentSumAggregateOutputType | null
    _min: UserLikedCommentMinAggregateOutputType | null
    _max: UserLikedCommentMaxAggregateOutputType | null
  }

  type GetUserLikedCommentGroupByPayload<T extends UserLikedCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserLikedCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserLikedCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserLikedCommentGroupByOutputType[P]>
            : GetScalarType<T[P], UserLikedCommentGroupByOutputType[P]>
        }
      >
    >


  export type UserLikedCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    idComment?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userLikedComment"]>



  export type UserLikedCommentSelectScalar = {
    idUser?: boolean
    idComment?: boolean
  }

  export type UserLikedCommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "idComment", ExtArgs["result"]["userLikedComment"]>
  export type UserLikedCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }

  export type $UserLikedCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserLikedComment"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      idComment: number
    }, ExtArgs["result"]["userLikedComment"]>
    composites: {}
  }

  type UserLikedCommentGetPayload<S extends boolean | null | undefined | UserLikedCommentDefaultArgs> = $Result.GetResult<Prisma.$UserLikedCommentPayload, S>

  type UserLikedCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserLikedCommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserLikedCommentCountAggregateInputType | true
    }

  export interface UserLikedCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserLikedComment'], meta: { name: 'UserLikedComment' } }
    /**
     * Find zero or one UserLikedComment that matches the filter.
     * @param {UserLikedCommentFindUniqueArgs} args - Arguments to find a UserLikedComment
     * @example
     * // Get one UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserLikedCommentFindUniqueArgs>(args: SelectSubset<T, UserLikedCommentFindUniqueArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserLikedComment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserLikedCommentFindUniqueOrThrowArgs} args - Arguments to find a UserLikedComment
     * @example
     * // Get one UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserLikedCommentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserLikedCommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLikedComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentFindFirstArgs} args - Arguments to find a UserLikedComment
     * @example
     * // Get one UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserLikedCommentFindFirstArgs>(args?: SelectSubset<T, UserLikedCommentFindFirstArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserLikedComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentFindFirstOrThrowArgs} args - Arguments to find a UserLikedComment
     * @example
     * // Get one UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserLikedCommentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserLikedCommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserLikedComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserLikedComments
     * const userLikedComments = await prisma.userLikedComment.findMany()
     * 
     * // Get first 10 UserLikedComments
     * const userLikedComments = await prisma.userLikedComment.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userLikedCommentWithIdUserOnly = await prisma.userLikedComment.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UserLikedCommentFindManyArgs>(args?: SelectSubset<T, UserLikedCommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserLikedComment.
     * @param {UserLikedCommentCreateArgs} args - Arguments to create a UserLikedComment.
     * @example
     * // Create one UserLikedComment
     * const UserLikedComment = await prisma.userLikedComment.create({
     *   data: {
     *     // ... data to create a UserLikedComment
     *   }
     * })
     * 
     */
    create<T extends UserLikedCommentCreateArgs>(args: SelectSubset<T, UserLikedCommentCreateArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserLikedComments.
     * @param {UserLikedCommentCreateManyArgs} args - Arguments to create many UserLikedComments.
     * @example
     * // Create many UserLikedComments
     * const userLikedComment = await prisma.userLikedComment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserLikedCommentCreateManyArgs>(args?: SelectSubset<T, UserLikedCommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserLikedComment.
     * @param {UserLikedCommentDeleteArgs} args - Arguments to delete one UserLikedComment.
     * @example
     * // Delete one UserLikedComment
     * const UserLikedComment = await prisma.userLikedComment.delete({
     *   where: {
     *     // ... filter to delete one UserLikedComment
     *   }
     * })
     * 
     */
    delete<T extends UserLikedCommentDeleteArgs>(args: SelectSubset<T, UserLikedCommentDeleteArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserLikedComment.
     * @param {UserLikedCommentUpdateArgs} args - Arguments to update one UserLikedComment.
     * @example
     * // Update one UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserLikedCommentUpdateArgs>(args: SelectSubset<T, UserLikedCommentUpdateArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserLikedComments.
     * @param {UserLikedCommentDeleteManyArgs} args - Arguments to filter UserLikedComments to delete.
     * @example
     * // Delete a few UserLikedComments
     * const { count } = await prisma.userLikedComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserLikedCommentDeleteManyArgs>(args?: SelectSubset<T, UserLikedCommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserLikedComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserLikedComments
     * const userLikedComment = await prisma.userLikedComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserLikedCommentUpdateManyArgs>(args: SelectSubset<T, UserLikedCommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserLikedComment.
     * @param {UserLikedCommentUpsertArgs} args - Arguments to update or create a UserLikedComment.
     * @example
     * // Update or create a UserLikedComment
     * const userLikedComment = await prisma.userLikedComment.upsert({
     *   create: {
     *     // ... data to create a UserLikedComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserLikedComment we want to update
     *   }
     * })
     */
    upsert<T extends UserLikedCommentUpsertArgs>(args: SelectSubset<T, UserLikedCommentUpsertArgs<ExtArgs>>): Prisma__UserLikedCommentClient<$Result.GetResult<Prisma.$UserLikedCommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserLikedComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentCountArgs} args - Arguments to filter UserLikedComments to count.
     * @example
     * // Count the number of UserLikedComments
     * const count = await prisma.userLikedComment.count({
     *   where: {
     *     // ... the filter for the UserLikedComments we want to count
     *   }
     * })
    **/
    count<T extends UserLikedCommentCountArgs>(
      args?: Subset<T, UserLikedCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserLikedCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserLikedComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserLikedCommentAggregateArgs>(args: Subset<T, UserLikedCommentAggregateArgs>): Prisma.PrismaPromise<GetUserLikedCommentAggregateType<T>>

    /**
     * Group by UserLikedComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserLikedCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserLikedCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserLikedCommentGroupByArgs['orderBy'] }
        : { orderBy?: UserLikedCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserLikedCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserLikedCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserLikedComment model
   */
  readonly fields: UserLikedCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserLikedComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserLikedCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserLikedComment model
   */
  interface UserLikedCommentFieldRefs {
    readonly idUser: FieldRef<"UserLikedComment", 'Int'>
    readonly idComment: FieldRef<"UserLikedComment", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserLikedComment findUnique
   */
  export type UserLikedCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedComment to fetch.
     */
    where: UserLikedCommentWhereUniqueInput
  }

  /**
   * UserLikedComment findUniqueOrThrow
   */
  export type UserLikedCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedComment to fetch.
     */
    where: UserLikedCommentWhereUniqueInput
  }

  /**
   * UserLikedComment findFirst
   */
  export type UserLikedCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedComment to fetch.
     */
    where?: UserLikedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedComments to fetch.
     */
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikedComments.
     */
    cursor?: UserLikedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikedComments.
     */
    distinct?: UserLikedCommentScalarFieldEnum | UserLikedCommentScalarFieldEnum[]
  }

  /**
   * UserLikedComment findFirstOrThrow
   */
  export type UserLikedCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedComment to fetch.
     */
    where?: UserLikedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedComments to fetch.
     */
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserLikedComments.
     */
    cursor?: UserLikedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserLikedComments.
     */
    distinct?: UserLikedCommentScalarFieldEnum | UserLikedCommentScalarFieldEnum[]
  }

  /**
   * UserLikedComment findMany
   */
  export type UserLikedCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter, which UserLikedComments to fetch.
     */
    where?: UserLikedCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserLikedComments to fetch.
     */
    orderBy?: UserLikedCommentOrderByWithRelationInput | UserLikedCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserLikedComments.
     */
    cursor?: UserLikedCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserLikedComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserLikedComments.
     */
    skip?: number
    distinct?: UserLikedCommentScalarFieldEnum | UserLikedCommentScalarFieldEnum[]
  }

  /**
   * UserLikedComment create
   */
  export type UserLikedCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserLikedComment.
     */
    data: XOR<UserLikedCommentCreateInput, UserLikedCommentUncheckedCreateInput>
  }

  /**
   * UserLikedComment createMany
   */
  export type UserLikedCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserLikedComments.
     */
    data: UserLikedCommentCreateManyInput | UserLikedCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserLikedComment update
   */
  export type UserLikedCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserLikedComment.
     */
    data: XOR<UserLikedCommentUpdateInput, UserLikedCommentUncheckedUpdateInput>
    /**
     * Choose, which UserLikedComment to update.
     */
    where: UserLikedCommentWhereUniqueInput
  }

  /**
   * UserLikedComment updateMany
   */
  export type UserLikedCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserLikedComments.
     */
    data: XOR<UserLikedCommentUpdateManyMutationInput, UserLikedCommentUncheckedUpdateManyInput>
    /**
     * Filter which UserLikedComments to update
     */
    where?: UserLikedCommentWhereInput
    /**
     * Limit how many UserLikedComments to update.
     */
    limit?: number
  }

  /**
   * UserLikedComment upsert
   */
  export type UserLikedCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserLikedComment to update in case it exists.
     */
    where: UserLikedCommentWhereUniqueInput
    /**
     * In case the UserLikedComment found by the `where` argument doesn't exist, create a new UserLikedComment with this data.
     */
    create: XOR<UserLikedCommentCreateInput, UserLikedCommentUncheckedCreateInput>
    /**
     * In case the UserLikedComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserLikedCommentUpdateInput, UserLikedCommentUncheckedUpdateInput>
  }

  /**
   * UserLikedComment delete
   */
  export type UserLikedCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
    /**
     * Filter which UserLikedComment to delete.
     */
    where: UserLikedCommentWhereUniqueInput
  }

  /**
   * UserLikedComment deleteMany
   */
  export type UserLikedCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserLikedComments to delete
     */
    where?: UserLikedCommentWhereInput
    /**
     * Limit how many UserLikedComments to delete.
     */
    limit?: number
  }

  /**
   * UserLikedComment without action
   */
  export type UserLikedCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserLikedComment
     */
    select?: UserLikedCommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserLikedComment
     */
    omit?: UserLikedCommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserLikedCommentInclude<ExtArgs> | null
  }


  /**
   * Model UserViewedPost
   */

  export type AggregateUserViewedPost = {
    _count: UserViewedPostCountAggregateOutputType | null
    _avg: UserViewedPostAvgAggregateOutputType | null
    _sum: UserViewedPostSumAggregateOutputType | null
    _min: UserViewedPostMinAggregateOutputType | null
    _max: UserViewedPostMaxAggregateOutputType | null
  }

  export type UserViewedPostAvgAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserViewedPostSumAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserViewedPostMinAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserViewedPostMaxAggregateOutputType = {
    idUser: number | null
    idPost: number | null
  }

  export type UserViewedPostCountAggregateOutputType = {
    idUser: number
    idPost: number
    _all: number
  }


  export type UserViewedPostAvgAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserViewedPostSumAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserViewedPostMinAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserViewedPostMaxAggregateInputType = {
    idUser?: true
    idPost?: true
  }

  export type UserViewedPostCountAggregateInputType = {
    idUser?: true
    idPost?: true
    _all?: true
  }

  export type UserViewedPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserViewedPost to aggregate.
     */
    where?: UserViewedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserViewedPosts to fetch.
     */
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserViewedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserViewedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserViewedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserViewedPosts
    **/
    _count?: true | UserViewedPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserViewedPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserViewedPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserViewedPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserViewedPostMaxAggregateInputType
  }

  export type GetUserViewedPostAggregateType<T extends UserViewedPostAggregateArgs> = {
        [P in keyof T & keyof AggregateUserViewedPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserViewedPost[P]>
      : GetScalarType<T[P], AggregateUserViewedPost[P]>
  }




  export type UserViewedPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserViewedPostWhereInput
    orderBy?: UserViewedPostOrderByWithAggregationInput | UserViewedPostOrderByWithAggregationInput[]
    by: UserViewedPostScalarFieldEnum[] | UserViewedPostScalarFieldEnum
    having?: UserViewedPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserViewedPostCountAggregateInputType | true
    _avg?: UserViewedPostAvgAggregateInputType
    _sum?: UserViewedPostSumAggregateInputType
    _min?: UserViewedPostMinAggregateInputType
    _max?: UserViewedPostMaxAggregateInputType
  }

  export type UserViewedPostGroupByOutputType = {
    idUser: number
    idPost: number
    _count: UserViewedPostCountAggregateOutputType | null
    _avg: UserViewedPostAvgAggregateOutputType | null
    _sum: UserViewedPostSumAggregateOutputType | null
    _min: UserViewedPostMinAggregateOutputType | null
    _max: UserViewedPostMaxAggregateOutputType | null
  }

  type GetUserViewedPostGroupByPayload<T extends UserViewedPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserViewedPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserViewedPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserViewedPostGroupByOutputType[P]>
            : GetScalarType<T[P], UserViewedPostGroupByOutputType[P]>
        }
      >
    >


  export type UserViewedPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    idPost?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userViewedPost"]>



  export type UserViewedPostSelectScalar = {
    idUser?: boolean
    idPost?: boolean
  }

  export type UserViewedPostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "idPost", ExtArgs["result"]["userViewedPost"]>
  export type UserViewedPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }

  export type $UserViewedPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserViewedPost"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      idPost: number
    }, ExtArgs["result"]["userViewedPost"]>
    composites: {}
  }

  type UserViewedPostGetPayload<S extends boolean | null | undefined | UserViewedPostDefaultArgs> = $Result.GetResult<Prisma.$UserViewedPostPayload, S>

  type UserViewedPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserViewedPostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserViewedPostCountAggregateInputType | true
    }

  export interface UserViewedPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserViewedPost'], meta: { name: 'UserViewedPost' } }
    /**
     * Find zero or one UserViewedPost that matches the filter.
     * @param {UserViewedPostFindUniqueArgs} args - Arguments to find a UserViewedPost
     * @example
     * // Get one UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserViewedPostFindUniqueArgs>(args: SelectSubset<T, UserViewedPostFindUniqueArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserViewedPost that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserViewedPostFindUniqueOrThrowArgs} args - Arguments to find a UserViewedPost
     * @example
     * // Get one UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserViewedPostFindUniqueOrThrowArgs>(args: SelectSubset<T, UserViewedPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserViewedPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostFindFirstArgs} args - Arguments to find a UserViewedPost
     * @example
     * // Get one UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserViewedPostFindFirstArgs>(args?: SelectSubset<T, UserViewedPostFindFirstArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserViewedPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostFindFirstOrThrowArgs} args - Arguments to find a UserViewedPost
     * @example
     * // Get one UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserViewedPostFindFirstOrThrowArgs>(args?: SelectSubset<T, UserViewedPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserViewedPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserViewedPosts
     * const userViewedPosts = await prisma.userViewedPost.findMany()
     * 
     * // Get first 10 UserViewedPosts
     * const userViewedPosts = await prisma.userViewedPost.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userViewedPostWithIdUserOnly = await prisma.userViewedPost.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UserViewedPostFindManyArgs>(args?: SelectSubset<T, UserViewedPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserViewedPost.
     * @param {UserViewedPostCreateArgs} args - Arguments to create a UserViewedPost.
     * @example
     * // Create one UserViewedPost
     * const UserViewedPost = await prisma.userViewedPost.create({
     *   data: {
     *     // ... data to create a UserViewedPost
     *   }
     * })
     * 
     */
    create<T extends UserViewedPostCreateArgs>(args: SelectSubset<T, UserViewedPostCreateArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserViewedPosts.
     * @param {UserViewedPostCreateManyArgs} args - Arguments to create many UserViewedPosts.
     * @example
     * // Create many UserViewedPosts
     * const userViewedPost = await prisma.userViewedPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserViewedPostCreateManyArgs>(args?: SelectSubset<T, UserViewedPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserViewedPost.
     * @param {UserViewedPostDeleteArgs} args - Arguments to delete one UserViewedPost.
     * @example
     * // Delete one UserViewedPost
     * const UserViewedPost = await prisma.userViewedPost.delete({
     *   where: {
     *     // ... filter to delete one UserViewedPost
     *   }
     * })
     * 
     */
    delete<T extends UserViewedPostDeleteArgs>(args: SelectSubset<T, UserViewedPostDeleteArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserViewedPost.
     * @param {UserViewedPostUpdateArgs} args - Arguments to update one UserViewedPost.
     * @example
     * // Update one UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserViewedPostUpdateArgs>(args: SelectSubset<T, UserViewedPostUpdateArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserViewedPosts.
     * @param {UserViewedPostDeleteManyArgs} args - Arguments to filter UserViewedPosts to delete.
     * @example
     * // Delete a few UserViewedPosts
     * const { count } = await prisma.userViewedPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserViewedPostDeleteManyArgs>(args?: SelectSubset<T, UserViewedPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserViewedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserViewedPosts
     * const userViewedPost = await prisma.userViewedPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserViewedPostUpdateManyArgs>(args: SelectSubset<T, UserViewedPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserViewedPost.
     * @param {UserViewedPostUpsertArgs} args - Arguments to update or create a UserViewedPost.
     * @example
     * // Update or create a UserViewedPost
     * const userViewedPost = await prisma.userViewedPost.upsert({
     *   create: {
     *     // ... data to create a UserViewedPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserViewedPost we want to update
     *   }
     * })
     */
    upsert<T extends UserViewedPostUpsertArgs>(args: SelectSubset<T, UserViewedPostUpsertArgs<ExtArgs>>): Prisma__UserViewedPostClient<$Result.GetResult<Prisma.$UserViewedPostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserViewedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostCountArgs} args - Arguments to filter UserViewedPosts to count.
     * @example
     * // Count the number of UserViewedPosts
     * const count = await prisma.userViewedPost.count({
     *   where: {
     *     // ... the filter for the UserViewedPosts we want to count
     *   }
     * })
    **/
    count<T extends UserViewedPostCountArgs>(
      args?: Subset<T, UserViewedPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserViewedPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserViewedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserViewedPostAggregateArgs>(args: Subset<T, UserViewedPostAggregateArgs>): Prisma.PrismaPromise<GetUserViewedPostAggregateType<T>>

    /**
     * Group by UserViewedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserViewedPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserViewedPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserViewedPostGroupByArgs['orderBy'] }
        : { orderBy?: UserViewedPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserViewedPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserViewedPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserViewedPost model
   */
  readonly fields: UserViewedPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserViewedPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserViewedPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserViewedPost model
   */
  interface UserViewedPostFieldRefs {
    readonly idUser: FieldRef<"UserViewedPost", 'Int'>
    readonly idPost: FieldRef<"UserViewedPost", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserViewedPost findUnique
   */
  export type UserViewedPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserViewedPost to fetch.
     */
    where: UserViewedPostWhereUniqueInput
  }

  /**
   * UserViewedPost findUniqueOrThrow
   */
  export type UserViewedPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserViewedPost to fetch.
     */
    where: UserViewedPostWhereUniqueInput
  }

  /**
   * UserViewedPost findFirst
   */
  export type UserViewedPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserViewedPost to fetch.
     */
    where?: UserViewedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserViewedPosts to fetch.
     */
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserViewedPosts.
     */
    cursor?: UserViewedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserViewedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserViewedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserViewedPosts.
     */
    distinct?: UserViewedPostScalarFieldEnum | UserViewedPostScalarFieldEnum[]
  }

  /**
   * UserViewedPost findFirstOrThrow
   */
  export type UserViewedPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserViewedPost to fetch.
     */
    where?: UserViewedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserViewedPosts to fetch.
     */
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserViewedPosts.
     */
    cursor?: UserViewedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserViewedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserViewedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserViewedPosts.
     */
    distinct?: UserViewedPostScalarFieldEnum | UserViewedPostScalarFieldEnum[]
  }

  /**
   * UserViewedPost findMany
   */
  export type UserViewedPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter, which UserViewedPosts to fetch.
     */
    where?: UserViewedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserViewedPosts to fetch.
     */
    orderBy?: UserViewedPostOrderByWithRelationInput | UserViewedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserViewedPosts.
     */
    cursor?: UserViewedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserViewedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserViewedPosts.
     */
    skip?: number
    distinct?: UserViewedPostScalarFieldEnum | UserViewedPostScalarFieldEnum[]
  }

  /**
   * UserViewedPost create
   */
  export type UserViewedPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * The data needed to create a UserViewedPost.
     */
    data: XOR<UserViewedPostCreateInput, UserViewedPostUncheckedCreateInput>
  }

  /**
   * UserViewedPost createMany
   */
  export type UserViewedPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserViewedPosts.
     */
    data: UserViewedPostCreateManyInput | UserViewedPostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserViewedPost update
   */
  export type UserViewedPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * The data needed to update a UserViewedPost.
     */
    data: XOR<UserViewedPostUpdateInput, UserViewedPostUncheckedUpdateInput>
    /**
     * Choose, which UserViewedPost to update.
     */
    where: UserViewedPostWhereUniqueInput
  }

  /**
   * UserViewedPost updateMany
   */
  export type UserViewedPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserViewedPosts.
     */
    data: XOR<UserViewedPostUpdateManyMutationInput, UserViewedPostUncheckedUpdateManyInput>
    /**
     * Filter which UserViewedPosts to update
     */
    where?: UserViewedPostWhereInput
    /**
     * Limit how many UserViewedPosts to update.
     */
    limit?: number
  }

  /**
   * UserViewedPost upsert
   */
  export type UserViewedPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * The filter to search for the UserViewedPost to update in case it exists.
     */
    where: UserViewedPostWhereUniqueInput
    /**
     * In case the UserViewedPost found by the `where` argument doesn't exist, create a new UserViewedPost with this data.
     */
    create: XOR<UserViewedPostCreateInput, UserViewedPostUncheckedCreateInput>
    /**
     * In case the UserViewedPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserViewedPostUpdateInput, UserViewedPostUncheckedUpdateInput>
  }

  /**
   * UserViewedPost delete
   */
  export type UserViewedPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
    /**
     * Filter which UserViewedPost to delete.
     */
    where: UserViewedPostWhereUniqueInput
  }

  /**
   * UserViewedPost deleteMany
   */
  export type UserViewedPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserViewedPosts to delete
     */
    where?: UserViewedPostWhereInput
    /**
     * Limit how many UserViewedPosts to delete.
     */
    limit?: number
  }

  /**
   * UserViewedPost without action
   */
  export type UserViewedPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserViewedPost
     */
    select?: UserViewedPostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserViewedPost
     */
    omit?: UserViewedPostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserViewedPostInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NsuScalarFieldEnum: {
    idNsuUser: 'idNsuUser',
    realName: 'realName',
    email: 'email',
    group: 'group',
    hasLogined: 'hasLogined'
  };

  export type NsuScalarFieldEnum = (typeof NsuScalarFieldEnum)[keyof typeof NsuScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    idUser: 'idUser',
    displayedName: 'displayedName',
    pic: 'pic',
    admin: 'admin',
    password: 'password'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const PostScalarFieldEnum: {
    idPost: 'idPost',
    content: 'content',
    images: 'images',
    tags: 'tags',
    createdAt: 'createdAt',
    views: 'views',
    likes: 'likes',
    createdByIdUser: 'createdByIdUser'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    idComment: 'idComment',
    commentIdPost: 'commentIdPost',
    text: 'text',
    images: 'images',
    likes: 'likes',
    createdAt: 'createdAt',
    createdByIdUser: 'createdByIdUser'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const TagScalarFieldEnum: {
    idTag: 'idTag',
    name: 'name'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const UserFollowedTagScalarFieldEnum: {
    idUser: 'idUser',
    idTag: 'idTag'
  };

  export type UserFollowedTagScalarFieldEnum = (typeof UserFollowedTagScalarFieldEnum)[keyof typeof UserFollowedTagScalarFieldEnum]


  export const UserLikedPostScalarFieldEnum: {
    idUser: 'idUser',
    idPost: 'idPost'
  };

  export type UserLikedPostScalarFieldEnum = (typeof UserLikedPostScalarFieldEnum)[keyof typeof UserLikedPostScalarFieldEnum]


  export const UserLikedCommentScalarFieldEnum: {
    idUser: 'idUser',
    idComment: 'idComment'
  };

  export type UserLikedCommentScalarFieldEnum = (typeof UserLikedCommentScalarFieldEnum)[keyof typeof UserLikedCommentScalarFieldEnum]


  export const UserViewedPostScalarFieldEnum: {
    idUser: 'idUser',
    idPost: 'idPost'
  };

  export type UserViewedPostScalarFieldEnum = (typeof UserViewedPostScalarFieldEnum)[keyof typeof UserViewedPostScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NsuOrderByRelevanceFieldEnum: {
    realName: 'realName',
    email: 'email',
    group: 'group'
  };

  export type NsuOrderByRelevanceFieldEnum = (typeof NsuOrderByRelevanceFieldEnum)[keyof typeof NsuOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UsersOrderByRelevanceFieldEnum: {
    displayedName: 'displayedName',
    pic: 'pic',
    password: 'password'
  };

  export type UsersOrderByRelevanceFieldEnum = (typeof UsersOrderByRelevanceFieldEnum)[keyof typeof UsersOrderByRelevanceFieldEnum]


  export const PostOrderByRelevanceFieldEnum: {
    content: 'content',
    images: 'images',
    tags: 'tags'
  };

  export type PostOrderByRelevanceFieldEnum = (typeof PostOrderByRelevanceFieldEnum)[keyof typeof PostOrderByRelevanceFieldEnum]


  export const CommentOrderByRelevanceFieldEnum: {
    text: 'text',
    images: 'images'
  };

  export type CommentOrderByRelevanceFieldEnum = (typeof CommentOrderByRelevanceFieldEnum)[keyof typeof CommentOrderByRelevanceFieldEnum]


  export const TagOrderByRelevanceFieldEnum: {
    name: 'name'
  };

  export type TagOrderByRelevanceFieldEnum = (typeof TagOrderByRelevanceFieldEnum)[keyof typeof TagOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type NsuWhereInput = {
    AND?: NsuWhereInput | NsuWhereInput[]
    OR?: NsuWhereInput[]
    NOT?: NsuWhereInput | NsuWhereInput[]
    idNsuUser?: IntFilter<"Nsu"> | number
    realName?: StringFilter<"Nsu"> | string
    email?: StringFilter<"Nsu"> | string
    group?: StringFilter<"Nsu"> | string
    hasLogined?: BoolFilter<"Nsu"> | boolean
    user?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }

  export type NsuOrderByWithRelationInput = {
    idNsuUser?: SortOrder
    realName?: SortOrder
    email?: SortOrder
    group?: SortOrder
    hasLogined?: SortOrder
    user?: UsersOrderByWithRelationInput
    _relevance?: NsuOrderByRelevanceInput
  }

  export type NsuWhereUniqueInput = Prisma.AtLeast<{
    idNsuUser?: number
    email?: string
    AND?: NsuWhereInput | NsuWhereInput[]
    OR?: NsuWhereInput[]
    NOT?: NsuWhereInput | NsuWhereInput[]
    realName?: StringFilter<"Nsu"> | string
    group?: StringFilter<"Nsu"> | string
    hasLogined?: BoolFilter<"Nsu"> | boolean
    user?: XOR<UsersNullableScalarRelationFilter, UsersWhereInput> | null
  }, "idNsuUser" | "email">

  export type NsuOrderByWithAggregationInput = {
    idNsuUser?: SortOrder
    realName?: SortOrder
    email?: SortOrder
    group?: SortOrder
    hasLogined?: SortOrder
    _count?: NsuCountOrderByAggregateInput
    _avg?: NsuAvgOrderByAggregateInput
    _max?: NsuMaxOrderByAggregateInput
    _min?: NsuMinOrderByAggregateInput
    _sum?: NsuSumOrderByAggregateInput
  }

  export type NsuScalarWhereWithAggregatesInput = {
    AND?: NsuScalarWhereWithAggregatesInput | NsuScalarWhereWithAggregatesInput[]
    OR?: NsuScalarWhereWithAggregatesInput[]
    NOT?: NsuScalarWhereWithAggregatesInput | NsuScalarWhereWithAggregatesInput[]
    idNsuUser?: IntWithAggregatesFilter<"Nsu"> | number
    realName?: StringWithAggregatesFilter<"Nsu"> | string
    email?: StringWithAggregatesFilter<"Nsu"> | string
    group?: StringWithAggregatesFilter<"Nsu"> | string
    hasLogined?: BoolWithAggregatesFilter<"Nsu"> | boolean
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    idUser?: IntFilter<"Users"> | number
    displayedName?: StringFilter<"Users"> | string
    pic?: StringNullableFilter<"Users"> | string | null
    admin?: BoolFilter<"Users"> | boolean
    password?: StringNullableFilter<"Users"> | string | null
    nsu?: XOR<NsuNullableScalarRelationFilter, NsuWhereInput> | null
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    likedPosts?: UserLikedPostListRelationFilter
    likedComments?: UserLikedCommentListRelationFilter
    viewedPosts?: UserViewedPostListRelationFilter
    followedTags?: UserFollowedTagListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    idUser?: SortOrder
    displayedName?: SortOrder
    pic?: SortOrderInput | SortOrder
    admin?: SortOrder
    password?: SortOrderInput | SortOrder
    nsu?: NsuOrderByWithRelationInput
    posts?: PostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    likedPosts?: UserLikedPostOrderByRelationAggregateInput
    likedComments?: UserLikedCommentOrderByRelationAggregateInput
    viewedPosts?: UserViewedPostOrderByRelationAggregateInput
    followedTags?: UserFollowedTagOrderByRelationAggregateInput
    _relevance?: UsersOrderByRelevanceInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    idUser?: number
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    displayedName?: StringFilter<"Users"> | string
    pic?: StringNullableFilter<"Users"> | string | null
    admin?: BoolFilter<"Users"> | boolean
    password?: StringNullableFilter<"Users"> | string | null
    nsu?: XOR<NsuNullableScalarRelationFilter, NsuWhereInput> | null
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    likedPosts?: UserLikedPostListRelationFilter
    likedComments?: UserLikedCommentListRelationFilter
    viewedPosts?: UserViewedPostListRelationFilter
    followedTags?: UserFollowedTagListRelationFilter
  }, "idUser">

  export type UsersOrderByWithAggregationInput = {
    idUser?: SortOrder
    displayedName?: SortOrder
    pic?: SortOrderInput | SortOrder
    admin?: SortOrder
    password?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"Users"> | number
    displayedName?: StringWithAggregatesFilter<"Users"> | string
    pic?: StringNullableWithAggregatesFilter<"Users"> | string | null
    admin?: BoolWithAggregatesFilter<"Users"> | boolean
    password?: StringNullableWithAggregatesFilter<"Users"> | string | null
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    idPost?: IntFilter<"Post"> | number
    content?: StringFilter<"Post"> | string
    images?: StringNullableFilter<"Post"> | string | null
    tags?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    views?: IntFilter<"Post"> | number
    likes?: IntFilter<"Post"> | number
    createdByIdUser?: IntFilter<"Post"> | number
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    comments?: CommentListRelationFilter
    likedBy?: UserLikedPostListRelationFilter
    viewedBy?: UserViewedPostListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    idPost?: SortOrder
    content?: SortOrder
    images?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
    createdBy?: UsersOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    likedBy?: UserLikedPostOrderByRelationAggregateInput
    viewedBy?: UserViewedPostOrderByRelationAggregateInput
    _relevance?: PostOrderByRelevanceInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    idPost?: number
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringFilter<"Post"> | string
    images?: StringNullableFilter<"Post"> | string | null
    tags?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    views?: IntFilter<"Post"> | number
    likes?: IntFilter<"Post"> | number
    createdByIdUser?: IntFilter<"Post"> | number
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    comments?: CommentListRelationFilter
    likedBy?: UserLikedPostListRelationFilter
    viewedBy?: UserViewedPostListRelationFilter
  }, "idPost">

  export type PostOrderByWithAggregationInput = {
    idPost?: SortOrder
    content?: SortOrder
    images?: SortOrderInput | SortOrder
    tags?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    idPost?: IntWithAggregatesFilter<"Post"> | number
    content?: StringWithAggregatesFilter<"Post"> | string
    images?: StringNullableWithAggregatesFilter<"Post"> | string | null
    tags?: StringNullableWithAggregatesFilter<"Post"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    views?: IntWithAggregatesFilter<"Post"> | number
    likes?: IntWithAggregatesFilter<"Post"> | number
    createdByIdUser?: IntWithAggregatesFilter<"Post"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    idComment?: IntFilter<"Comment"> | number
    commentIdPost?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    likes?: IntFilter<"Comment"> | number
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    createdByIdUser?: IntFilter<"Comment"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    likedBy?: UserLikedCommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    text?: SortOrder
    images?: SortOrderInput | SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    createdByIdUser?: SortOrder
    post?: PostOrderByWithRelationInput
    createdBy?: UsersOrderByWithRelationInput
    likedBy?: UserLikedCommentOrderByRelationAggregateInput
    _relevance?: CommentOrderByRelevanceInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    idComment?: number
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    commentIdPost?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    likes?: IntFilter<"Comment"> | number
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    createdByIdUser?: IntFilter<"Comment"> | number
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    createdBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    likedBy?: UserLikedCommentListRelationFilter
  }, "idComment">

  export type CommentOrderByWithAggregationInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    text?: SortOrder
    images?: SortOrderInput | SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    createdByIdUser?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    idComment?: IntWithAggregatesFilter<"Comment"> | number
    commentIdPost?: IntWithAggregatesFilter<"Comment"> | number
    text?: StringWithAggregatesFilter<"Comment"> | string
    images?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    likes?: IntWithAggregatesFilter<"Comment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    createdByIdUser?: IntWithAggregatesFilter<"Comment"> | number
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    idTag?: IntFilter<"Tag"> | number
    name?: StringFilter<"Tag"> | string
    followedBy?: UserFollowedTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    idTag?: SortOrder
    name?: SortOrder
    followedBy?: UserFollowedTagOrderByRelationAggregateInput
    _relevance?: TagOrderByRelevanceInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    idTag?: number
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    followedBy?: UserFollowedTagListRelationFilter
  }, "idTag" | "name">

  export type TagOrderByWithAggregationInput = {
    idTag?: SortOrder
    name?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _avg?: TagAvgOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
    _sum?: TagSumOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    idTag?: IntWithAggregatesFilter<"Tag"> | number
    name?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type UserFollowedTagWhereInput = {
    AND?: UserFollowedTagWhereInput | UserFollowedTagWhereInput[]
    OR?: UserFollowedTagWhereInput[]
    NOT?: UserFollowedTagWhereInput | UserFollowedTagWhereInput[]
    idUser?: IntFilter<"UserFollowedTag"> | number
    idTag?: IntFilter<"UserFollowedTag"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type UserFollowedTagOrderByWithRelationInput = {
    idUser?: SortOrder
    idTag?: SortOrder
    user?: UsersOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type UserFollowedTagWhereUniqueInput = Prisma.AtLeast<{
    idUser_idTag?: UserFollowedTagIdUserIdTagCompoundUniqueInput
    AND?: UserFollowedTagWhereInput | UserFollowedTagWhereInput[]
    OR?: UserFollowedTagWhereInput[]
    NOT?: UserFollowedTagWhereInput | UserFollowedTagWhereInput[]
    idUser?: IntFilter<"UserFollowedTag"> | number
    idTag?: IntFilter<"UserFollowedTag"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "idUser_idTag">

  export type UserFollowedTagOrderByWithAggregationInput = {
    idUser?: SortOrder
    idTag?: SortOrder
    _count?: UserFollowedTagCountOrderByAggregateInput
    _avg?: UserFollowedTagAvgOrderByAggregateInput
    _max?: UserFollowedTagMaxOrderByAggregateInput
    _min?: UserFollowedTagMinOrderByAggregateInput
    _sum?: UserFollowedTagSumOrderByAggregateInput
  }

  export type UserFollowedTagScalarWhereWithAggregatesInput = {
    AND?: UserFollowedTagScalarWhereWithAggregatesInput | UserFollowedTagScalarWhereWithAggregatesInput[]
    OR?: UserFollowedTagScalarWhereWithAggregatesInput[]
    NOT?: UserFollowedTagScalarWhereWithAggregatesInput | UserFollowedTagScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"UserFollowedTag"> | number
    idTag?: IntWithAggregatesFilter<"UserFollowedTag"> | number
  }

  export type UserLikedPostWhereInput = {
    AND?: UserLikedPostWhereInput | UserLikedPostWhereInput[]
    OR?: UserLikedPostWhereInput[]
    NOT?: UserLikedPostWhereInput | UserLikedPostWhereInput[]
    idUser?: IntFilter<"UserLikedPost"> | number
    idPost?: IntFilter<"UserLikedPost"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type UserLikedPostOrderByWithRelationInput = {
    idUser?: SortOrder
    idPost?: SortOrder
    user?: UsersOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type UserLikedPostWhereUniqueInput = Prisma.AtLeast<{
    idUser_idPost?: UserLikedPostIdUserIdPostCompoundUniqueInput
    AND?: UserLikedPostWhereInput | UserLikedPostWhereInput[]
    OR?: UserLikedPostWhereInput[]
    NOT?: UserLikedPostWhereInput | UserLikedPostWhereInput[]
    idUser?: IntFilter<"UserLikedPost"> | number
    idPost?: IntFilter<"UserLikedPost"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "idUser_idPost">

  export type UserLikedPostOrderByWithAggregationInput = {
    idUser?: SortOrder
    idPost?: SortOrder
    _count?: UserLikedPostCountOrderByAggregateInput
    _avg?: UserLikedPostAvgOrderByAggregateInput
    _max?: UserLikedPostMaxOrderByAggregateInput
    _min?: UserLikedPostMinOrderByAggregateInput
    _sum?: UserLikedPostSumOrderByAggregateInput
  }

  export type UserLikedPostScalarWhereWithAggregatesInput = {
    AND?: UserLikedPostScalarWhereWithAggregatesInput | UserLikedPostScalarWhereWithAggregatesInput[]
    OR?: UserLikedPostScalarWhereWithAggregatesInput[]
    NOT?: UserLikedPostScalarWhereWithAggregatesInput | UserLikedPostScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"UserLikedPost"> | number
    idPost?: IntWithAggregatesFilter<"UserLikedPost"> | number
  }

  export type UserLikedCommentWhereInput = {
    AND?: UserLikedCommentWhereInput | UserLikedCommentWhereInput[]
    OR?: UserLikedCommentWhereInput[]
    NOT?: UserLikedCommentWhereInput | UserLikedCommentWhereInput[]
    idUser?: IntFilter<"UserLikedComment"> | number
    idComment?: IntFilter<"UserLikedComment"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }

  export type UserLikedCommentOrderByWithRelationInput = {
    idUser?: SortOrder
    idComment?: SortOrder
    user?: UsersOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type UserLikedCommentWhereUniqueInput = Prisma.AtLeast<{
    idUser_idComment?: UserLikedCommentIdUserIdCommentCompoundUniqueInput
    AND?: UserLikedCommentWhereInput | UserLikedCommentWhereInput[]
    OR?: UserLikedCommentWhereInput[]
    NOT?: UserLikedCommentWhereInput | UserLikedCommentWhereInput[]
    idUser?: IntFilter<"UserLikedComment"> | number
    idComment?: IntFilter<"UserLikedComment"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    comment?: XOR<CommentScalarRelationFilter, CommentWhereInput>
  }, "idUser_idComment">

  export type UserLikedCommentOrderByWithAggregationInput = {
    idUser?: SortOrder
    idComment?: SortOrder
    _count?: UserLikedCommentCountOrderByAggregateInput
    _avg?: UserLikedCommentAvgOrderByAggregateInput
    _max?: UserLikedCommentMaxOrderByAggregateInput
    _min?: UserLikedCommentMinOrderByAggregateInput
    _sum?: UserLikedCommentSumOrderByAggregateInput
  }

  export type UserLikedCommentScalarWhereWithAggregatesInput = {
    AND?: UserLikedCommentScalarWhereWithAggregatesInput | UserLikedCommentScalarWhereWithAggregatesInput[]
    OR?: UserLikedCommentScalarWhereWithAggregatesInput[]
    NOT?: UserLikedCommentScalarWhereWithAggregatesInput | UserLikedCommentScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"UserLikedComment"> | number
    idComment?: IntWithAggregatesFilter<"UserLikedComment"> | number
  }

  export type UserViewedPostWhereInput = {
    AND?: UserViewedPostWhereInput | UserViewedPostWhereInput[]
    OR?: UserViewedPostWhereInput[]
    NOT?: UserViewedPostWhereInput | UserViewedPostWhereInput[]
    idUser?: IntFilter<"UserViewedPost"> | number
    idPost?: IntFilter<"UserViewedPost"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }

  export type UserViewedPostOrderByWithRelationInput = {
    idUser?: SortOrder
    idPost?: SortOrder
    user?: UsersOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type UserViewedPostWhereUniqueInput = Prisma.AtLeast<{
    idUser_idPost?: UserViewedPostIdUserIdPostCompoundUniqueInput
    AND?: UserViewedPostWhereInput | UserViewedPostWhereInput[]
    OR?: UserViewedPostWhereInput[]
    NOT?: UserViewedPostWhereInput | UserViewedPostWhereInput[]
    idUser?: IntFilter<"UserViewedPost"> | number
    idPost?: IntFilter<"UserViewedPost"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
  }, "idUser_idPost">

  export type UserViewedPostOrderByWithAggregationInput = {
    idUser?: SortOrder
    idPost?: SortOrder
    _count?: UserViewedPostCountOrderByAggregateInput
    _avg?: UserViewedPostAvgOrderByAggregateInput
    _max?: UserViewedPostMaxOrderByAggregateInput
    _min?: UserViewedPostMinOrderByAggregateInput
    _sum?: UserViewedPostSumOrderByAggregateInput
  }

  export type UserViewedPostScalarWhereWithAggregatesInput = {
    AND?: UserViewedPostScalarWhereWithAggregatesInput | UserViewedPostScalarWhereWithAggregatesInput[]
    OR?: UserViewedPostScalarWhereWithAggregatesInput[]
    NOT?: UserViewedPostScalarWhereWithAggregatesInput | UserViewedPostScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"UserViewedPost"> | number
    idPost?: IntWithAggregatesFilter<"UserViewedPost"> | number
  }

  export type NsuCreateInput = {
    realName: string
    email: string
    group: string
    hasLogined?: boolean
    user?: UsersCreateNestedOneWithoutNsuInput
  }

  export type NsuUncheckedCreateInput = {
    idNsuUser?: number
    realName: string
    email: string
    group: string
    hasLogined?: boolean
    user?: UsersUncheckedCreateNestedOneWithoutNsuInput
  }

  export type NsuUpdateInput = {
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
    user?: UsersUpdateOneWithoutNsuNestedInput
  }

  export type NsuUncheckedUpdateInput = {
    idNsuUser?: IntFieldUpdateOperationsInput | number
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
    user?: UsersUncheckedUpdateOneWithoutNsuNestedInput
  }

  export type NsuCreateManyInput = {
    idNsuUser?: number
    realName: string
    email: string
    group: string
    hasLogined?: boolean
  }

  export type NsuUpdateManyMutationInput = {
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NsuUncheckedUpdateManyInput = {
    idNsuUser?: IntFieldUpdateOperationsInput | number
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersCreateInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
  }

  export type UsersUpdateManyMutationInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UsersUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostCreateInput = {
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdBy: UsersCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdByIdUser: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostUncheckedCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdBy?: UsersUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUncheckedUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdByIdUser: number
  }

  export type PostUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type PostUncheckedUpdateManyInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdByIdUser?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
    createdBy: UsersCreateNestedOneWithoutCommentsInput
    likedBy?: UserLikedCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    idComment?: number
    commentIdPost: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdByIdUser: number
    likedBy?: UserLikedCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCommentsNestedInput
    likedBy?: UserLikedCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    commentIdPost?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    likedBy?: UserLikedCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    idComment?: number
    commentIdPost: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdByIdUser: number
  }

  export type CommentUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    commentIdPost?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIdUser?: IntFieldUpdateOperationsInput | number
  }

  export type TagCreateInput = {
    name: string
    followedBy?: UserFollowedTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    idTag?: number
    name: string
    followedBy?: UserFollowedTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    followedBy?: UserFollowedTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    idTag?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    followedBy?: UserFollowedTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    idTag?: number
    name: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    idTag?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserFollowedTagCreateInput = {
    user: UsersCreateNestedOneWithoutFollowedTagsInput
    tag: TagCreateNestedOneWithoutFollowedByInput
  }

  export type UserFollowedTagUncheckedCreateInput = {
    idUser: number
    idTag: number
  }

  export type UserFollowedTagUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutFollowedTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type UserFollowedTagUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idTag?: IntFieldUpdateOperationsInput | number
  }

  export type UserFollowedTagCreateManyInput = {
    idUser: number
    idTag: number
  }

  export type UserFollowedTagUpdateManyMutationInput = {

  }

  export type UserFollowedTagUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idTag?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedPostCreateInput = {
    user: UsersCreateNestedOneWithoutLikedPostsInput
    post: PostCreateNestedOneWithoutLikedByInput
  }

  export type UserLikedPostUncheckedCreateInput = {
    idUser: number
    idPost: number
  }

  export type UserLikedPostUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutLikedPostsNestedInput
    post?: PostUpdateOneRequiredWithoutLikedByNestedInput
  }

  export type UserLikedPostUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedPostCreateManyInput = {
    idUser: number
    idPost: number
  }

  export type UserLikedPostUpdateManyMutationInput = {

  }

  export type UserLikedPostUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentCreateInput = {
    user: UsersCreateNestedOneWithoutLikedCommentsInput
    comment: CommentCreateNestedOneWithoutLikedByInput
  }

  export type UserLikedCommentUncheckedCreateInput = {
    idUser: number
    idComment: number
  }

  export type UserLikedCommentUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutLikedCommentsNestedInput
    comment?: CommentUpdateOneRequiredWithoutLikedByNestedInput
  }

  export type UserLikedCommentUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idComment?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentCreateManyInput = {
    idUser: number
    idComment: number
  }

  export type UserLikedCommentUpdateManyMutationInput = {

  }

  export type UserLikedCommentUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idComment?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostCreateInput = {
    user: UsersCreateNestedOneWithoutViewedPostsInput
    post: PostCreateNestedOneWithoutViewedByInput
  }

  export type UserViewedPostUncheckedCreateInput = {
    idUser: number
    idPost: number
  }

  export type UserViewedPostUpdateInput = {
    user?: UsersUpdateOneRequiredWithoutViewedPostsNestedInput
    post?: PostUpdateOneRequiredWithoutViewedByNestedInput
  }

  export type UserViewedPostUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostCreateManyInput = {
    idUser: number
    idPost: number
  }

  export type UserViewedPostUpdateManyMutationInput = {

  }

  export type UserViewedPostUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsersNullableScalarRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type NsuOrderByRelevanceInput = {
    fields: NsuOrderByRelevanceFieldEnum | NsuOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NsuCountOrderByAggregateInput = {
    idNsuUser?: SortOrder
    realName?: SortOrder
    email?: SortOrder
    group?: SortOrder
    hasLogined?: SortOrder
  }

  export type NsuAvgOrderByAggregateInput = {
    idNsuUser?: SortOrder
  }

  export type NsuMaxOrderByAggregateInput = {
    idNsuUser?: SortOrder
    realName?: SortOrder
    email?: SortOrder
    group?: SortOrder
    hasLogined?: SortOrder
  }

  export type NsuMinOrderByAggregateInput = {
    idNsuUser?: SortOrder
    realName?: SortOrder
    email?: SortOrder
    group?: SortOrder
    hasLogined?: SortOrder
  }

  export type NsuSumOrderByAggregateInput = {
    idNsuUser?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NsuNullableScalarRelationFilter = {
    is?: NsuWhereInput | null
    isNot?: NsuWhereInput | null
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type UserLikedPostListRelationFilter = {
    every?: UserLikedPostWhereInput
    some?: UserLikedPostWhereInput
    none?: UserLikedPostWhereInput
  }

  export type UserLikedCommentListRelationFilter = {
    every?: UserLikedCommentWhereInput
    some?: UserLikedCommentWhereInput
    none?: UserLikedCommentWhereInput
  }

  export type UserViewedPostListRelationFilter = {
    every?: UserViewedPostWhereInput
    some?: UserViewedPostWhereInput
    none?: UserViewedPostWhereInput
  }

  export type UserFollowedTagListRelationFilter = {
    every?: UserFollowedTagWhereInput
    some?: UserFollowedTagWhereInput
    none?: UserFollowedTagWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLikedPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserLikedCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserViewedPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFollowedTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelevanceInput = {
    fields: UsersOrderByRelevanceFieldEnum | UsersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UsersCountOrderByAggregateInput = {
    idUser?: SortOrder
    displayedName?: SortOrder
    pic?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    idUser?: SortOrder
    displayedName?: SortOrder
    pic?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    idUser?: SortOrder
    displayedName?: SortOrder
    pic?: SortOrder
    admin?: SortOrder
    password?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type PostOrderByRelevanceInput = {
    fields: PostOrderByRelevanceFieldEnum | PostOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PostCountOrderByAggregateInput = {
    idPost?: SortOrder
    content?: SortOrder
    images?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    idPost?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    idPost?: SortOrder
    content?: SortOrder
    images?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    idPost?: SortOrder
    content?: SortOrder
    images?: SortOrder
    tags?: SortOrder
    createdAt?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    idPost?: SortOrder
    views?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type CommentOrderByRelevanceInput = {
    fields: CommentOrderByRelevanceFieldEnum | CommentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CommentCountOrderByAggregateInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    text?: SortOrder
    images?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    text?: SortOrder
    images?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    text?: SortOrder
    images?: SortOrder
    likes?: SortOrder
    createdAt?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    idComment?: SortOrder
    commentIdPost?: SortOrder
    likes?: SortOrder
    createdByIdUser?: SortOrder
  }

  export type TagOrderByRelevanceInput = {
    fields: TagOrderByRelevanceFieldEnum | TagOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TagCountOrderByAggregateInput = {
    idTag?: SortOrder
    name?: SortOrder
  }

  export type TagAvgOrderByAggregateInput = {
    idTag?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    idTag?: SortOrder
    name?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    idTag?: SortOrder
    name?: SortOrder
  }

  export type TagSumOrderByAggregateInput = {
    idTag?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type UserFollowedTagIdUserIdTagCompoundUniqueInput = {
    idUser: number
    idTag: number
  }

  export type UserFollowedTagCountOrderByAggregateInput = {
    idUser?: SortOrder
    idTag?: SortOrder
  }

  export type UserFollowedTagAvgOrderByAggregateInput = {
    idUser?: SortOrder
    idTag?: SortOrder
  }

  export type UserFollowedTagMaxOrderByAggregateInput = {
    idUser?: SortOrder
    idTag?: SortOrder
  }

  export type UserFollowedTagMinOrderByAggregateInput = {
    idUser?: SortOrder
    idTag?: SortOrder
  }

  export type UserFollowedTagSumOrderByAggregateInput = {
    idUser?: SortOrder
    idTag?: SortOrder
  }

  export type UserLikedPostIdUserIdPostCompoundUniqueInput = {
    idUser: number
    idPost: number
  }

  export type UserLikedPostCountOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserLikedPostAvgOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserLikedPostMaxOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserLikedPostMinOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserLikedPostSumOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type CommentScalarRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type UserLikedCommentIdUserIdCommentCompoundUniqueInput = {
    idUser: number
    idComment: number
  }

  export type UserLikedCommentCountOrderByAggregateInput = {
    idUser?: SortOrder
    idComment?: SortOrder
  }

  export type UserLikedCommentAvgOrderByAggregateInput = {
    idUser?: SortOrder
    idComment?: SortOrder
  }

  export type UserLikedCommentMaxOrderByAggregateInput = {
    idUser?: SortOrder
    idComment?: SortOrder
  }

  export type UserLikedCommentMinOrderByAggregateInput = {
    idUser?: SortOrder
    idComment?: SortOrder
  }

  export type UserLikedCommentSumOrderByAggregateInput = {
    idUser?: SortOrder
    idComment?: SortOrder
  }

  export type UserViewedPostIdUserIdPostCompoundUniqueInput = {
    idUser: number
    idPost: number
  }

  export type UserViewedPostCountOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserViewedPostAvgOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserViewedPostMaxOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserViewedPostMinOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UserViewedPostSumOrderByAggregateInput = {
    idUser?: SortOrder
    idPost?: SortOrder
  }

  export type UsersCreateNestedOneWithoutNsuInput = {
    create?: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNsuInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUncheckedCreateNestedOneWithoutNsuInput = {
    create?: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNsuInput
    connect?: UsersWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneWithoutNsuNestedInput = {
    create?: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNsuInput
    upsert?: UsersUpsertWithoutNsuInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutNsuInput, UsersUpdateWithoutNsuInput>, UsersUncheckedUpdateWithoutNsuInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersUncheckedUpdateOneWithoutNsuNestedInput = {
    create?: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
    connectOrCreate?: UsersCreateOrConnectWithoutNsuInput
    upsert?: UsersUpsertWithoutNsuInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutNsuInput, UsersUpdateWithoutNsuInput>, UsersUncheckedUpdateWithoutNsuInput>
  }

  export type NsuCreateNestedOneWithoutUserInput = {
    create?: XOR<NsuCreateWithoutUserInput, NsuUncheckedCreateWithoutUserInput>
    connectOrCreate?: NsuCreateOrConnectWithoutUserInput
    connect?: NsuWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput> | PostCreateWithoutCreatedByInput[] | PostUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCreatedByInput | PostCreateOrConnectWithoutCreatedByInput[]
    createMany?: PostCreateManyCreatedByInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput> | CommentCreateWithoutCreatedByInput[] | CommentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCreatedByInput | CommentCreateOrConnectWithoutCreatedByInput[]
    createMany?: CommentCreateManyCreatedByInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserLikedPostCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput> | UserLikedPostCreateWithoutUserInput[] | UserLikedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutUserInput | UserLikedPostCreateOrConnectWithoutUserInput[]
    createMany?: UserLikedPostCreateManyUserInputEnvelope
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
  }

  export type UserLikedCommentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput> | UserLikedCommentCreateWithoutUserInput[] | UserLikedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutUserInput | UserLikedCommentCreateOrConnectWithoutUserInput[]
    createMany?: UserLikedCommentCreateManyUserInputEnvelope
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
  }

  export type UserViewedPostCreateNestedManyWithoutUserInput = {
    create?: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput> | UserViewedPostCreateWithoutUserInput[] | UserViewedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutUserInput | UserViewedPostCreateOrConnectWithoutUserInput[]
    createMany?: UserViewedPostCreateManyUserInputEnvelope
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
  }

  export type UserFollowedTagCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput> | UserFollowedTagCreateWithoutUserInput[] | UserFollowedTagUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutUserInput | UserFollowedTagCreateOrConnectWithoutUserInput[]
    createMany?: UserFollowedTagCreateManyUserInputEnvelope
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput> | PostCreateWithoutCreatedByInput[] | PostUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCreatedByInput | PostCreateOrConnectWithoutCreatedByInput[]
    createMany?: PostCreateManyCreatedByInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput> | CommentCreateWithoutCreatedByInput[] | CommentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCreatedByInput | CommentCreateOrConnectWithoutCreatedByInput[]
    createMany?: CommentCreateManyCreatedByInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserLikedPostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput> | UserLikedPostCreateWithoutUserInput[] | UserLikedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutUserInput | UserLikedPostCreateOrConnectWithoutUserInput[]
    createMany?: UserLikedPostCreateManyUserInputEnvelope
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
  }

  export type UserLikedCommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput> | UserLikedCommentCreateWithoutUserInput[] | UserLikedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutUserInput | UserLikedCommentCreateOrConnectWithoutUserInput[]
    createMany?: UserLikedCommentCreateManyUserInputEnvelope
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
  }

  export type UserViewedPostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput> | UserViewedPostCreateWithoutUserInput[] | UserViewedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutUserInput | UserViewedPostCreateOrConnectWithoutUserInput[]
    createMany?: UserViewedPostCreateManyUserInputEnvelope
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
  }

  export type UserFollowedTagUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput> | UserFollowedTagCreateWithoutUserInput[] | UserFollowedTagUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutUserInput | UserFollowedTagCreateOrConnectWithoutUserInput[]
    createMany?: UserFollowedTagCreateManyUserInputEnvelope
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NsuUpdateOneWithoutUserNestedInput = {
    create?: XOR<NsuCreateWithoutUserInput, NsuUncheckedCreateWithoutUserInput>
    connectOrCreate?: NsuCreateOrConnectWithoutUserInput
    upsert?: NsuUpsertWithoutUserInput
    disconnect?: NsuWhereInput | boolean
    delete?: NsuWhereInput | boolean
    connect?: NsuWhereUniqueInput
    update?: XOR<XOR<NsuUpdateToOneWithWhereWithoutUserInput, NsuUpdateWithoutUserInput>, NsuUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput> | PostCreateWithoutCreatedByInput[] | PostUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCreatedByInput | PostCreateOrConnectWithoutCreatedByInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCreatedByInput | PostUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PostCreateManyCreatedByInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCreatedByInput | PostUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCreatedByInput | PostUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput> | CommentCreateWithoutCreatedByInput[] | CommentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCreatedByInput | CommentCreateOrConnectWithoutCreatedByInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCreatedByInput | CommentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CommentCreateManyCreatedByInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCreatedByInput | CommentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCreatedByInput | CommentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserLikedPostUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput> | UserLikedPostCreateWithoutUserInput[] | UserLikedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutUserInput | UserLikedPostCreateOrConnectWithoutUserInput[]
    upsert?: UserLikedPostUpsertWithWhereUniqueWithoutUserInput | UserLikedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikedPostCreateManyUserInputEnvelope
    set?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    disconnect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    delete?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    update?: UserLikedPostUpdateWithWhereUniqueWithoutUserInput | UserLikedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikedPostUpdateManyWithWhereWithoutUserInput | UserLikedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
  }

  export type UserLikedCommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput> | UserLikedCommentCreateWithoutUserInput[] | UserLikedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutUserInput | UserLikedCommentCreateOrConnectWithoutUserInput[]
    upsert?: UserLikedCommentUpsertWithWhereUniqueWithoutUserInput | UserLikedCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikedCommentCreateManyUserInputEnvelope
    set?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    disconnect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    delete?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    update?: UserLikedCommentUpdateWithWhereUniqueWithoutUserInput | UserLikedCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikedCommentUpdateManyWithWhereWithoutUserInput | UserLikedCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
  }

  export type UserViewedPostUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput> | UserViewedPostCreateWithoutUserInput[] | UserViewedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutUserInput | UserViewedPostCreateOrConnectWithoutUserInput[]
    upsert?: UserViewedPostUpsertWithWhereUniqueWithoutUserInput | UserViewedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserViewedPostCreateManyUserInputEnvelope
    set?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    disconnect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    delete?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    update?: UserViewedPostUpdateWithWhereUniqueWithoutUserInput | UserViewedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserViewedPostUpdateManyWithWhereWithoutUserInput | UserViewedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
  }

  export type UserFollowedTagUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput> | UserFollowedTagCreateWithoutUserInput[] | UserFollowedTagUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutUserInput | UserFollowedTagCreateOrConnectWithoutUserInput[]
    upsert?: UserFollowedTagUpsertWithWhereUniqueWithoutUserInput | UserFollowedTagUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFollowedTagCreateManyUserInputEnvelope
    set?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    disconnect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    delete?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    update?: UserFollowedTagUpdateWithWhereUniqueWithoutUserInput | UserFollowedTagUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFollowedTagUpdateManyWithWhereWithoutUserInput | UserFollowedTagUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput> | PostCreateWithoutCreatedByInput[] | PostUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCreatedByInput | PostCreateOrConnectWithoutCreatedByInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCreatedByInput | PostUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PostCreateManyCreatedByInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCreatedByInput | PostUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCreatedByInput | PostUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput> | CommentCreateWithoutCreatedByInput[] | CommentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCreatedByInput | CommentCreateOrConnectWithoutCreatedByInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCreatedByInput | CommentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CommentCreateManyCreatedByInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCreatedByInput | CommentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCreatedByInput | CommentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserLikedPostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput> | UserLikedPostCreateWithoutUserInput[] | UserLikedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutUserInput | UserLikedPostCreateOrConnectWithoutUserInput[]
    upsert?: UserLikedPostUpsertWithWhereUniqueWithoutUserInput | UserLikedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikedPostCreateManyUserInputEnvelope
    set?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    disconnect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    delete?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    update?: UserLikedPostUpdateWithWhereUniqueWithoutUserInput | UserLikedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikedPostUpdateManyWithWhereWithoutUserInput | UserLikedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
  }

  export type UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput> | UserLikedCommentCreateWithoutUserInput[] | UserLikedCommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutUserInput | UserLikedCommentCreateOrConnectWithoutUserInput[]
    upsert?: UserLikedCommentUpsertWithWhereUniqueWithoutUserInput | UserLikedCommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserLikedCommentCreateManyUserInputEnvelope
    set?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    disconnect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    delete?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    update?: UserLikedCommentUpdateWithWhereUniqueWithoutUserInput | UserLikedCommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserLikedCommentUpdateManyWithWhereWithoutUserInput | UserLikedCommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
  }

  export type UserViewedPostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput> | UserViewedPostCreateWithoutUserInput[] | UserViewedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutUserInput | UserViewedPostCreateOrConnectWithoutUserInput[]
    upsert?: UserViewedPostUpsertWithWhereUniqueWithoutUserInput | UserViewedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserViewedPostCreateManyUserInputEnvelope
    set?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    disconnect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    delete?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    update?: UserViewedPostUpdateWithWhereUniqueWithoutUserInput | UserViewedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserViewedPostUpdateManyWithWhereWithoutUserInput | UserViewedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
  }

  export type UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput> | UserFollowedTagCreateWithoutUserInput[] | UserFollowedTagUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutUserInput | UserFollowedTagCreateOrConnectWithoutUserInput[]
    upsert?: UserFollowedTagUpsertWithWhereUniqueWithoutUserInput | UserFollowedTagUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserFollowedTagCreateManyUserInputEnvelope
    set?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    disconnect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    delete?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    update?: UserFollowedTagUpdateWithWhereUniqueWithoutUserInput | UserFollowedTagUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserFollowedTagUpdateManyWithWhereWithoutUserInput | UserFollowedTagUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutPostsInput = {
    create?: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPostsInput
    connect?: UsersWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserLikedPostCreateNestedManyWithoutPostInput = {
    create?: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput> | UserLikedPostCreateWithoutPostInput[] | UserLikedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutPostInput | UserLikedPostCreateOrConnectWithoutPostInput[]
    createMany?: UserLikedPostCreateManyPostInputEnvelope
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
  }

  export type UserViewedPostCreateNestedManyWithoutPostInput = {
    create?: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput> | UserViewedPostCreateWithoutPostInput[] | UserViewedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutPostInput | UserViewedPostCreateOrConnectWithoutPostInput[]
    createMany?: UserViewedPostCreateManyPostInputEnvelope
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserLikedPostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput> | UserLikedPostCreateWithoutPostInput[] | UserLikedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutPostInput | UserLikedPostCreateOrConnectWithoutPostInput[]
    createMany?: UserLikedPostCreateManyPostInputEnvelope
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
  }

  export type UserViewedPostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput> | UserViewedPostCreateWithoutPostInput[] | UserViewedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutPostInput | UserViewedPostCreateOrConnectWithoutPostInput[]
    createMany?: UserViewedPostCreateManyPostInputEnvelope
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPostsInput
    upsert?: UsersUpsertWithoutPostsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutPostsInput, UsersUpdateWithoutPostsInput>, UsersUncheckedUpdateWithoutPostsInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserLikedPostUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput> | UserLikedPostCreateWithoutPostInput[] | UserLikedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutPostInput | UserLikedPostCreateOrConnectWithoutPostInput[]
    upsert?: UserLikedPostUpsertWithWhereUniqueWithoutPostInput | UserLikedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserLikedPostCreateManyPostInputEnvelope
    set?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    disconnect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    delete?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    update?: UserLikedPostUpdateWithWhereUniqueWithoutPostInput | UserLikedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserLikedPostUpdateManyWithWhereWithoutPostInput | UserLikedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
  }

  export type UserViewedPostUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput> | UserViewedPostCreateWithoutPostInput[] | UserViewedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutPostInput | UserViewedPostCreateOrConnectWithoutPostInput[]
    upsert?: UserViewedPostUpsertWithWhereUniqueWithoutPostInput | UserViewedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserViewedPostCreateManyPostInputEnvelope
    set?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    disconnect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    delete?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    update?: UserViewedPostUpdateWithWhereUniqueWithoutPostInput | UserViewedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserViewedPostUpdateManyWithWhereWithoutPostInput | UserViewedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserLikedPostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput> | UserLikedPostCreateWithoutPostInput[] | UserLikedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserLikedPostCreateOrConnectWithoutPostInput | UserLikedPostCreateOrConnectWithoutPostInput[]
    upsert?: UserLikedPostUpsertWithWhereUniqueWithoutPostInput | UserLikedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserLikedPostCreateManyPostInputEnvelope
    set?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    disconnect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    delete?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    connect?: UserLikedPostWhereUniqueInput | UserLikedPostWhereUniqueInput[]
    update?: UserLikedPostUpdateWithWhereUniqueWithoutPostInput | UserLikedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserLikedPostUpdateManyWithWhereWithoutPostInput | UserLikedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
  }

  export type UserViewedPostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput> | UserViewedPostCreateWithoutPostInput[] | UserViewedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserViewedPostCreateOrConnectWithoutPostInput | UserViewedPostCreateOrConnectWithoutPostInput[]
    upsert?: UserViewedPostUpsertWithWhereUniqueWithoutPostInput | UserViewedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserViewedPostCreateManyPostInputEnvelope
    set?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    disconnect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    delete?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    connect?: UserViewedPostWhereUniqueInput | UserViewedPostWhereUniqueInput[]
    update?: UserViewedPostUpdateWithWhereUniqueWithoutPostInput | UserViewedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserViewedPostUpdateManyWithWhereWithoutPostInput | UserViewedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommentsInput
    connect?: UsersWhereUniqueInput
  }

  export type UserLikedCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput> | UserLikedCommentCreateWithoutCommentInput[] | UserLikedCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutCommentInput | UserLikedCommentCreateOrConnectWithoutCommentInput[]
    createMany?: UserLikedCommentCreateManyCommentInputEnvelope
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
  }

  export type UserLikedCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput> | UserLikedCommentCreateWithoutCommentInput[] | UserLikedCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutCommentInput | UserLikedCommentCreateOrConnectWithoutCommentInput[]
    createMany?: UserLikedCommentCreateManyCommentInputEnvelope
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type UsersUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutCommentsInput
    upsert?: UsersUpsertWithoutCommentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutCommentsInput, UsersUpdateWithoutCommentsInput>, UsersUncheckedUpdateWithoutCommentsInput>
  }

  export type UserLikedCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput> | UserLikedCommentCreateWithoutCommentInput[] | UserLikedCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutCommentInput | UserLikedCommentCreateOrConnectWithoutCommentInput[]
    upsert?: UserLikedCommentUpsertWithWhereUniqueWithoutCommentInput | UserLikedCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: UserLikedCommentCreateManyCommentInputEnvelope
    set?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    disconnect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    delete?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    update?: UserLikedCommentUpdateWithWhereUniqueWithoutCommentInput | UserLikedCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: UserLikedCommentUpdateManyWithWhereWithoutCommentInput | UserLikedCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
  }

  export type UserLikedCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput> | UserLikedCommentCreateWithoutCommentInput[] | UserLikedCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: UserLikedCommentCreateOrConnectWithoutCommentInput | UserLikedCommentCreateOrConnectWithoutCommentInput[]
    upsert?: UserLikedCommentUpsertWithWhereUniqueWithoutCommentInput | UserLikedCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: UserLikedCommentCreateManyCommentInputEnvelope
    set?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    disconnect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    delete?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    connect?: UserLikedCommentWhereUniqueInput | UserLikedCommentWhereUniqueInput[]
    update?: UserLikedCommentUpdateWithWhereUniqueWithoutCommentInput | UserLikedCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: UserLikedCommentUpdateManyWithWhereWithoutCommentInput | UserLikedCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
  }

  export type UserFollowedTagCreateNestedManyWithoutTagInput = {
    create?: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput> | UserFollowedTagCreateWithoutTagInput[] | UserFollowedTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutTagInput | UserFollowedTagCreateOrConnectWithoutTagInput[]
    createMany?: UserFollowedTagCreateManyTagInputEnvelope
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
  }

  export type UserFollowedTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput> | UserFollowedTagCreateWithoutTagInput[] | UserFollowedTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutTagInput | UserFollowedTagCreateOrConnectWithoutTagInput[]
    createMany?: UserFollowedTagCreateManyTagInputEnvelope
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
  }

  export type UserFollowedTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput> | UserFollowedTagCreateWithoutTagInput[] | UserFollowedTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutTagInput | UserFollowedTagCreateOrConnectWithoutTagInput[]
    upsert?: UserFollowedTagUpsertWithWhereUniqueWithoutTagInput | UserFollowedTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: UserFollowedTagCreateManyTagInputEnvelope
    set?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    disconnect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    delete?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    update?: UserFollowedTagUpdateWithWhereUniqueWithoutTagInput | UserFollowedTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: UserFollowedTagUpdateManyWithWhereWithoutTagInput | UserFollowedTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
  }

  export type UserFollowedTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput> | UserFollowedTagCreateWithoutTagInput[] | UserFollowedTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: UserFollowedTagCreateOrConnectWithoutTagInput | UserFollowedTagCreateOrConnectWithoutTagInput[]
    upsert?: UserFollowedTagUpsertWithWhereUniqueWithoutTagInput | UserFollowedTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: UserFollowedTagCreateManyTagInputEnvelope
    set?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    disconnect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    delete?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    connect?: UserFollowedTagWhereUniqueInput | UserFollowedTagWhereUniqueInput[]
    update?: UserFollowedTagUpdateWithWhereUniqueWithoutTagInput | UserFollowedTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: UserFollowedTagUpdateManyWithWhereWithoutTagInput | UserFollowedTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutFollowedTagsInput = {
    create?: XOR<UsersCreateWithoutFollowedTagsInput, UsersUncheckedCreateWithoutFollowedTagsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFollowedTagsInput
    connect?: UsersWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutFollowedByInput = {
    create?: XOR<TagCreateWithoutFollowedByInput, TagUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: TagCreateOrConnectWithoutFollowedByInput
    connect?: TagWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutFollowedTagsNestedInput = {
    create?: XOR<UsersCreateWithoutFollowedTagsInput, UsersUncheckedCreateWithoutFollowedTagsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFollowedTagsInput
    upsert?: UsersUpsertWithoutFollowedTagsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutFollowedTagsInput, UsersUpdateWithoutFollowedTagsInput>, UsersUncheckedUpdateWithoutFollowedTagsInput>
  }

  export type TagUpdateOneRequiredWithoutFollowedByNestedInput = {
    create?: XOR<TagCreateWithoutFollowedByInput, TagUncheckedCreateWithoutFollowedByInput>
    connectOrCreate?: TagCreateOrConnectWithoutFollowedByInput
    upsert?: TagUpsertWithoutFollowedByInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutFollowedByInput, TagUpdateWithoutFollowedByInput>, TagUncheckedUpdateWithoutFollowedByInput>
  }

  export type UsersCreateNestedOneWithoutLikedPostsInput = {
    create?: XOR<UsersCreateWithoutLikedPostsInput, UsersUncheckedCreateWithoutLikedPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikedPostsInput
    connect?: UsersWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutLikedByInput = {
    create?: XOR<PostCreateWithoutLikedByInput, PostUncheckedCreateWithoutLikedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikedByInput
    connect?: PostWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutLikedPostsNestedInput = {
    create?: XOR<UsersCreateWithoutLikedPostsInput, UsersUncheckedCreateWithoutLikedPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikedPostsInput
    upsert?: UsersUpsertWithoutLikedPostsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLikedPostsInput, UsersUpdateWithoutLikedPostsInput>, UsersUncheckedUpdateWithoutLikedPostsInput>
  }

  export type PostUpdateOneRequiredWithoutLikedByNestedInput = {
    create?: XOR<PostCreateWithoutLikedByInput, PostUncheckedCreateWithoutLikedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikedByInput
    upsert?: PostUpsertWithoutLikedByInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikedByInput, PostUpdateWithoutLikedByInput>, PostUncheckedUpdateWithoutLikedByInput>
  }

  export type UsersCreateNestedOneWithoutLikedCommentsInput = {
    create?: XOR<UsersCreateWithoutLikedCommentsInput, UsersUncheckedCreateWithoutLikedCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikedCommentsInput
    connect?: UsersWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutLikedByInput = {
    create?: XOR<CommentCreateWithoutLikedByInput, CommentUncheckedCreateWithoutLikedByInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikedByInput
    connect?: CommentWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutLikedCommentsNestedInput = {
    create?: XOR<UsersCreateWithoutLikedCommentsInput, UsersUncheckedCreateWithoutLikedCommentsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikedCommentsInput
    upsert?: UsersUpsertWithoutLikedCommentsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLikedCommentsInput, UsersUpdateWithoutLikedCommentsInput>, UsersUncheckedUpdateWithoutLikedCommentsInput>
  }

  export type CommentUpdateOneRequiredWithoutLikedByNestedInput = {
    create?: XOR<CommentCreateWithoutLikedByInput, CommentUncheckedCreateWithoutLikedByInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikedByInput
    upsert?: CommentUpsertWithoutLikedByInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutLikedByInput, CommentUpdateWithoutLikedByInput>, CommentUncheckedUpdateWithoutLikedByInput>
  }

  export type UsersCreateNestedOneWithoutViewedPostsInput = {
    create?: XOR<UsersCreateWithoutViewedPostsInput, UsersUncheckedCreateWithoutViewedPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutViewedPostsInput
    connect?: UsersWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutViewedByInput = {
    create?: XOR<PostCreateWithoutViewedByInput, PostUncheckedCreateWithoutViewedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutViewedByInput
    connect?: PostWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutViewedPostsNestedInput = {
    create?: XOR<UsersCreateWithoutViewedPostsInput, UsersUncheckedCreateWithoutViewedPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutViewedPostsInput
    upsert?: UsersUpsertWithoutViewedPostsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutViewedPostsInput, UsersUpdateWithoutViewedPostsInput>, UsersUncheckedUpdateWithoutViewedPostsInput>
  }

  export type PostUpdateOneRequiredWithoutViewedByNestedInput = {
    create?: XOR<PostCreateWithoutViewedByInput, PostUncheckedCreateWithoutViewedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutViewedByInput
    upsert?: PostUpsertWithoutViewedByInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutViewedByInput, PostUpdateWithoutViewedByInput>, PostUncheckedUpdateWithoutViewedByInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersCreateWithoutNsuInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutNsuInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutNsuInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
  }

  export type UsersUpsertWithoutNsuInput = {
    update: XOR<UsersUpdateWithoutNsuInput, UsersUncheckedUpdateWithoutNsuInput>
    create: XOR<UsersCreateWithoutNsuInput, UsersUncheckedCreateWithoutNsuInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutNsuInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutNsuInput, UsersUncheckedUpdateWithoutNsuInput>
  }

  export type UsersUpdateWithoutNsuInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutNsuInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NsuCreateWithoutUserInput = {
    realName: string
    email: string
    group: string
    hasLogined?: boolean
  }

  export type NsuUncheckedCreateWithoutUserInput = {
    idNsuUser?: number
    realName: string
    email: string
    group: string
    hasLogined?: boolean
  }

  export type NsuCreateOrConnectWithoutUserInput = {
    where: NsuWhereUniqueInput
    create: XOR<NsuCreateWithoutUserInput, NsuUncheckedCreateWithoutUserInput>
  }

  export type PostCreateWithoutCreatedByInput = {
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    comments?: CommentCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCreatedByInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostUncheckedCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCreatedByInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput>
  }

  export type PostCreateManyCreatedByInputEnvelope = {
    data: PostCreateManyCreatedByInput | PostCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutCreatedByInput = {
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
    likedBy?: UserLikedCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutCreatedByInput = {
    idComment?: number
    commentIdPost: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    likedBy?: UserLikedCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput>
  }

  export type CommentCreateManyCreatedByInputEnvelope = {
    data: CommentCreateManyCreatedByInput | CommentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserLikedPostCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutLikedByInput
  }

  export type UserLikedPostUncheckedCreateWithoutUserInput = {
    idPost: number
  }

  export type UserLikedPostCreateOrConnectWithoutUserInput = {
    where: UserLikedPostWhereUniqueInput
    create: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput>
  }

  export type UserLikedPostCreateManyUserInputEnvelope = {
    data: UserLikedPostCreateManyUserInput | UserLikedPostCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserLikedCommentCreateWithoutUserInput = {
    comment: CommentCreateNestedOneWithoutLikedByInput
  }

  export type UserLikedCommentUncheckedCreateWithoutUserInput = {
    idComment: number
  }

  export type UserLikedCommentCreateOrConnectWithoutUserInput = {
    where: UserLikedCommentWhereUniqueInput
    create: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput>
  }

  export type UserLikedCommentCreateManyUserInputEnvelope = {
    data: UserLikedCommentCreateManyUserInput | UserLikedCommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserViewedPostCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutViewedByInput
  }

  export type UserViewedPostUncheckedCreateWithoutUserInput = {
    idPost: number
  }

  export type UserViewedPostCreateOrConnectWithoutUserInput = {
    where: UserViewedPostWhereUniqueInput
    create: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput>
  }

  export type UserViewedPostCreateManyUserInputEnvelope = {
    data: UserViewedPostCreateManyUserInput | UserViewedPostCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserFollowedTagCreateWithoutUserInput = {
    tag: TagCreateNestedOneWithoutFollowedByInput
  }

  export type UserFollowedTagUncheckedCreateWithoutUserInput = {
    idTag: number
  }

  export type UserFollowedTagCreateOrConnectWithoutUserInput = {
    where: UserFollowedTagWhereUniqueInput
    create: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput>
  }

  export type UserFollowedTagCreateManyUserInputEnvelope = {
    data: UserFollowedTagCreateManyUserInput | UserFollowedTagCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NsuUpsertWithoutUserInput = {
    update: XOR<NsuUpdateWithoutUserInput, NsuUncheckedUpdateWithoutUserInput>
    create: XOR<NsuCreateWithoutUserInput, NsuUncheckedCreateWithoutUserInput>
    where?: NsuWhereInput
  }

  export type NsuUpdateToOneWithWhereWithoutUserInput = {
    where?: NsuWhereInput
    data: XOR<NsuUpdateWithoutUserInput, NsuUncheckedUpdateWithoutUserInput>
  }

  export type NsuUpdateWithoutUserInput = {
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NsuUncheckedUpdateWithoutUserInput = {
    idNsuUser?: IntFieldUpdateOperationsInput | number
    realName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    group?: StringFieldUpdateOperationsInput | string
    hasLogined?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCreatedByInput, PostUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PostCreateWithoutCreatedByInput, PostUncheckedCreateWithoutCreatedByInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCreatedByInput, PostUncheckedUpdateWithoutCreatedByInput>
  }

  export type PostUpdateManyWithWhereWithoutCreatedByInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    idPost?: IntFilter<"Post"> | number
    content?: StringFilter<"Post"> | string
    images?: StringNullableFilter<"Post"> | string | null
    tags?: StringNullableFilter<"Post"> | string | null
    createdAt?: DateTimeFilter<"Post"> | Date | string
    views?: IntFilter<"Post"> | number
    likes?: IntFilter<"Post"> | number
    createdByIdUser?: IntFilter<"Post"> | number
  }

  export type CommentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCreatedByInput, CommentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CommentCreateWithoutCreatedByInput, CommentUncheckedCreateWithoutCreatedByInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCreatedByInput, CommentUncheckedUpdateWithoutCreatedByInput>
  }

  export type CommentUpdateManyWithWhereWithoutCreatedByInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    idComment?: IntFilter<"Comment"> | number
    commentIdPost?: IntFilter<"Comment"> | number
    text?: StringFilter<"Comment"> | string
    images?: StringNullableFilter<"Comment"> | string | null
    likes?: IntFilter<"Comment"> | number
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    createdByIdUser?: IntFilter<"Comment"> | number
  }

  export type UserLikedPostUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLikedPostWhereUniqueInput
    update: XOR<UserLikedPostUpdateWithoutUserInput, UserLikedPostUncheckedUpdateWithoutUserInput>
    create: XOR<UserLikedPostCreateWithoutUserInput, UserLikedPostUncheckedCreateWithoutUserInput>
  }

  export type UserLikedPostUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLikedPostWhereUniqueInput
    data: XOR<UserLikedPostUpdateWithoutUserInput, UserLikedPostUncheckedUpdateWithoutUserInput>
  }

  export type UserLikedPostUpdateManyWithWhereWithoutUserInput = {
    where: UserLikedPostScalarWhereInput
    data: XOR<UserLikedPostUpdateManyMutationInput, UserLikedPostUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLikedPostScalarWhereInput = {
    AND?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
    OR?: UserLikedPostScalarWhereInput[]
    NOT?: UserLikedPostScalarWhereInput | UserLikedPostScalarWhereInput[]
    idUser?: IntFilter<"UserLikedPost"> | number
    idPost?: IntFilter<"UserLikedPost"> | number
  }

  export type UserLikedCommentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserLikedCommentWhereUniqueInput
    update: XOR<UserLikedCommentUpdateWithoutUserInput, UserLikedCommentUncheckedUpdateWithoutUserInput>
    create: XOR<UserLikedCommentCreateWithoutUserInput, UserLikedCommentUncheckedCreateWithoutUserInput>
  }

  export type UserLikedCommentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserLikedCommentWhereUniqueInput
    data: XOR<UserLikedCommentUpdateWithoutUserInput, UserLikedCommentUncheckedUpdateWithoutUserInput>
  }

  export type UserLikedCommentUpdateManyWithWhereWithoutUserInput = {
    where: UserLikedCommentScalarWhereInput
    data: XOR<UserLikedCommentUpdateManyMutationInput, UserLikedCommentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserLikedCommentScalarWhereInput = {
    AND?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
    OR?: UserLikedCommentScalarWhereInput[]
    NOT?: UserLikedCommentScalarWhereInput | UserLikedCommentScalarWhereInput[]
    idUser?: IntFilter<"UserLikedComment"> | number
    idComment?: IntFilter<"UserLikedComment"> | number
  }

  export type UserViewedPostUpsertWithWhereUniqueWithoutUserInput = {
    where: UserViewedPostWhereUniqueInput
    update: XOR<UserViewedPostUpdateWithoutUserInput, UserViewedPostUncheckedUpdateWithoutUserInput>
    create: XOR<UserViewedPostCreateWithoutUserInput, UserViewedPostUncheckedCreateWithoutUserInput>
  }

  export type UserViewedPostUpdateWithWhereUniqueWithoutUserInput = {
    where: UserViewedPostWhereUniqueInput
    data: XOR<UserViewedPostUpdateWithoutUserInput, UserViewedPostUncheckedUpdateWithoutUserInput>
  }

  export type UserViewedPostUpdateManyWithWhereWithoutUserInput = {
    where: UserViewedPostScalarWhereInput
    data: XOR<UserViewedPostUpdateManyMutationInput, UserViewedPostUncheckedUpdateManyWithoutUserInput>
  }

  export type UserViewedPostScalarWhereInput = {
    AND?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
    OR?: UserViewedPostScalarWhereInput[]
    NOT?: UserViewedPostScalarWhereInput | UserViewedPostScalarWhereInput[]
    idUser?: IntFilter<"UserViewedPost"> | number
    idPost?: IntFilter<"UserViewedPost"> | number
  }

  export type UserFollowedTagUpsertWithWhereUniqueWithoutUserInput = {
    where: UserFollowedTagWhereUniqueInput
    update: XOR<UserFollowedTagUpdateWithoutUserInput, UserFollowedTagUncheckedUpdateWithoutUserInput>
    create: XOR<UserFollowedTagCreateWithoutUserInput, UserFollowedTagUncheckedCreateWithoutUserInput>
  }

  export type UserFollowedTagUpdateWithWhereUniqueWithoutUserInput = {
    where: UserFollowedTagWhereUniqueInput
    data: XOR<UserFollowedTagUpdateWithoutUserInput, UserFollowedTagUncheckedUpdateWithoutUserInput>
  }

  export type UserFollowedTagUpdateManyWithWhereWithoutUserInput = {
    where: UserFollowedTagScalarWhereInput
    data: XOR<UserFollowedTagUpdateManyMutationInput, UserFollowedTagUncheckedUpdateManyWithoutUserInput>
  }

  export type UserFollowedTagScalarWhereInput = {
    AND?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
    OR?: UserFollowedTagScalarWhereInput[]
    NOT?: UserFollowedTagScalarWhereInput | UserFollowedTagScalarWhereInput[]
    idUser?: IntFilter<"UserFollowedTag"> | number
    idTag?: IntFilter<"UserFollowedTag"> | number
  }

  export type UsersCreateWithoutPostsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutPostsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutPostsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdBy: UsersCreateNestedOneWithoutCommentsInput
    likedBy?: UserLikedCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    idComment?: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdByIdUser: number
    likedBy?: UserLikedCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserLikedPostCreateWithoutPostInput = {
    user: UsersCreateNestedOneWithoutLikedPostsInput
  }

  export type UserLikedPostUncheckedCreateWithoutPostInput = {
    idUser: number
  }

  export type UserLikedPostCreateOrConnectWithoutPostInput = {
    where: UserLikedPostWhereUniqueInput
    create: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput>
  }

  export type UserLikedPostCreateManyPostInputEnvelope = {
    data: UserLikedPostCreateManyPostInput | UserLikedPostCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserViewedPostCreateWithoutPostInput = {
    user: UsersCreateNestedOneWithoutViewedPostsInput
  }

  export type UserViewedPostUncheckedCreateWithoutPostInput = {
    idUser: number
  }

  export type UserViewedPostCreateOrConnectWithoutPostInput = {
    where: UserViewedPostWhereUniqueInput
    create: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput>
  }

  export type UserViewedPostCreateManyPostInputEnvelope = {
    data: UserViewedPostCreateManyPostInput | UserViewedPostCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutPostsInput = {
    update: XOR<UsersUpdateWithoutPostsInput, UsersUncheckedUpdateWithoutPostsInput>
    create: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutPostsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutPostsInput, UsersUncheckedUpdateWithoutPostsInput>
  }

  export type UsersUpdateWithoutPostsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPostsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type UserLikedPostUpsertWithWhereUniqueWithoutPostInput = {
    where: UserLikedPostWhereUniqueInput
    update: XOR<UserLikedPostUpdateWithoutPostInput, UserLikedPostUncheckedUpdateWithoutPostInput>
    create: XOR<UserLikedPostCreateWithoutPostInput, UserLikedPostUncheckedCreateWithoutPostInput>
  }

  export type UserLikedPostUpdateWithWhereUniqueWithoutPostInput = {
    where: UserLikedPostWhereUniqueInput
    data: XOR<UserLikedPostUpdateWithoutPostInput, UserLikedPostUncheckedUpdateWithoutPostInput>
  }

  export type UserLikedPostUpdateManyWithWhereWithoutPostInput = {
    where: UserLikedPostScalarWhereInput
    data: XOR<UserLikedPostUpdateManyMutationInput, UserLikedPostUncheckedUpdateManyWithoutPostInput>
  }

  export type UserViewedPostUpsertWithWhereUniqueWithoutPostInput = {
    where: UserViewedPostWhereUniqueInput
    update: XOR<UserViewedPostUpdateWithoutPostInput, UserViewedPostUncheckedUpdateWithoutPostInput>
    create: XOR<UserViewedPostCreateWithoutPostInput, UserViewedPostUncheckedCreateWithoutPostInput>
  }

  export type UserViewedPostUpdateWithWhereUniqueWithoutPostInput = {
    where: UserViewedPostWhereUniqueInput
    data: XOR<UserViewedPostUpdateWithoutPostInput, UserViewedPostUncheckedUpdateWithoutPostInput>
  }

  export type UserViewedPostUpdateManyWithWhereWithoutPostInput = {
    where: UserViewedPostScalarWhereInput
    data: XOR<UserViewedPostUpdateManyMutationInput, UserViewedPostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostCreateWithoutCommentsInput = {
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdBy: UsersCreateNestedOneWithoutPostsInput
    likedBy?: UserLikedPostCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdByIdUser: number
    likedBy?: UserLikedPostUncheckedCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type UsersCreateWithoutCommentsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutCommentsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutCommentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
  }

  export type UserLikedCommentCreateWithoutCommentInput = {
    user: UsersCreateNestedOneWithoutLikedCommentsInput
  }

  export type UserLikedCommentUncheckedCreateWithoutCommentInput = {
    idUser: number
  }

  export type UserLikedCommentCreateOrConnectWithoutCommentInput = {
    where: UserLikedCommentWhereUniqueInput
    create: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput>
  }

  export type UserLikedCommentCreateManyCommentInputEnvelope = {
    data: UserLikedCommentCreateManyCommentInput | UserLikedCommentCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdBy?: UsersUpdateOneRequiredWithoutPostsNestedInput
    likedBy?: UserLikedPostUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    likedBy?: UserLikedPostUncheckedUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UsersUpsertWithoutCommentsInput = {
    update: XOR<UsersUpdateWithoutCommentsInput, UsersUncheckedUpdateWithoutCommentsInput>
    create: XOR<UsersCreateWithoutCommentsInput, UsersUncheckedCreateWithoutCommentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutCommentsInput, UsersUncheckedUpdateWithoutCommentsInput>
  }

  export type UsersUpdateWithoutCommentsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutCommentsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserLikedCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: UserLikedCommentWhereUniqueInput
    update: XOR<UserLikedCommentUpdateWithoutCommentInput, UserLikedCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<UserLikedCommentCreateWithoutCommentInput, UserLikedCommentUncheckedCreateWithoutCommentInput>
  }

  export type UserLikedCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: UserLikedCommentWhereUniqueInput
    data: XOR<UserLikedCommentUpdateWithoutCommentInput, UserLikedCommentUncheckedUpdateWithoutCommentInput>
  }

  export type UserLikedCommentUpdateManyWithWhereWithoutCommentInput = {
    where: UserLikedCommentScalarWhereInput
    data: XOR<UserLikedCommentUpdateManyMutationInput, UserLikedCommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type UserFollowedTagCreateWithoutTagInput = {
    user: UsersCreateNestedOneWithoutFollowedTagsInput
  }

  export type UserFollowedTagUncheckedCreateWithoutTagInput = {
    idUser: number
  }

  export type UserFollowedTagCreateOrConnectWithoutTagInput = {
    where: UserFollowedTagWhereUniqueInput
    create: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput>
  }

  export type UserFollowedTagCreateManyTagInputEnvelope = {
    data: UserFollowedTagCreateManyTagInput | UserFollowedTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type UserFollowedTagUpsertWithWhereUniqueWithoutTagInput = {
    where: UserFollowedTagWhereUniqueInput
    update: XOR<UserFollowedTagUpdateWithoutTagInput, UserFollowedTagUncheckedUpdateWithoutTagInput>
    create: XOR<UserFollowedTagCreateWithoutTagInput, UserFollowedTagUncheckedCreateWithoutTagInput>
  }

  export type UserFollowedTagUpdateWithWhereUniqueWithoutTagInput = {
    where: UserFollowedTagWhereUniqueInput
    data: XOR<UserFollowedTagUpdateWithoutTagInput, UserFollowedTagUncheckedUpdateWithoutTagInput>
  }

  export type UserFollowedTagUpdateManyWithWhereWithoutTagInput = {
    where: UserFollowedTagScalarWhereInput
    data: XOR<UserFollowedTagUpdateManyMutationInput, UserFollowedTagUncheckedUpdateManyWithoutTagInput>
  }

  export type UsersCreateWithoutFollowedTagsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutFollowedTagsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutFollowedTagsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFollowedTagsInput, UsersUncheckedCreateWithoutFollowedTagsInput>
  }

  export type TagCreateWithoutFollowedByInput = {
    name: string
  }

  export type TagUncheckedCreateWithoutFollowedByInput = {
    idTag?: number
    name: string
  }

  export type TagCreateOrConnectWithoutFollowedByInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutFollowedByInput, TagUncheckedCreateWithoutFollowedByInput>
  }

  export type UsersUpsertWithoutFollowedTagsInput = {
    update: XOR<UsersUpdateWithoutFollowedTagsInput, UsersUncheckedUpdateWithoutFollowedTagsInput>
    create: XOR<UsersCreateWithoutFollowedTagsInput, UsersUncheckedCreateWithoutFollowedTagsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutFollowedTagsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutFollowedTagsInput, UsersUncheckedUpdateWithoutFollowedTagsInput>
  }

  export type UsersUpdateWithoutFollowedTagsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFollowedTagsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TagUpsertWithoutFollowedByInput = {
    update: XOR<TagUpdateWithoutFollowedByInput, TagUncheckedUpdateWithoutFollowedByInput>
    create: XOR<TagCreateWithoutFollowedByInput, TagUncheckedCreateWithoutFollowedByInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutFollowedByInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutFollowedByInput, TagUncheckedUpdateWithoutFollowedByInput>
  }

  export type TagUpdateWithoutFollowedByInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutFollowedByInput = {
    idTag?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateWithoutLikedPostsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutLikedPostsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutLikedPostsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLikedPostsInput, UsersUncheckedCreateWithoutLikedPostsInput>
  }

  export type PostCreateWithoutLikedByInput = {
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdBy: UsersCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLikedByInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdByIdUser: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    viewedBy?: UserViewedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikedByInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikedByInput, PostUncheckedCreateWithoutLikedByInput>
  }

  export type UsersUpsertWithoutLikedPostsInput = {
    update: XOR<UsersUpdateWithoutLikedPostsInput, UsersUncheckedUpdateWithoutLikedPostsInput>
    create: XOR<UsersCreateWithoutLikedPostsInput, UsersUncheckedCreateWithoutLikedPostsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLikedPostsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLikedPostsInput, UsersUncheckedUpdateWithoutLikedPostsInput>
  }

  export type UsersUpdateWithoutLikedPostsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutLikedPostsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutLikedByInput = {
    update: XOR<PostUpdateWithoutLikedByInput, PostUncheckedUpdateWithoutLikedByInput>
    create: XOR<PostCreateWithoutLikedByInput, PostUncheckedCreateWithoutLikedByInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikedByInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikedByInput, PostUncheckedUpdateWithoutLikedByInput>
  }

  export type PostUpdateWithoutLikedByInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdBy?: UsersUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLikedByInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UsersCreateWithoutLikedCommentsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutLikedCommentsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    viewedPosts?: UserViewedPostUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutLikedCommentsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLikedCommentsInput, UsersUncheckedCreateWithoutLikedCommentsInput>
  }

  export type CommentCreateWithoutLikedByInput = {
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    post: PostCreateNestedOneWithoutCommentsInput
    createdBy: UsersCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutLikedByInput = {
    idComment?: number
    commentIdPost: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdByIdUser: number
  }

  export type CommentCreateOrConnectWithoutLikedByInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutLikedByInput, CommentUncheckedCreateWithoutLikedByInput>
  }

  export type UsersUpsertWithoutLikedCommentsInput = {
    update: XOR<UsersUpdateWithoutLikedCommentsInput, UsersUncheckedUpdateWithoutLikedCommentsInput>
    create: XOR<UsersCreateWithoutLikedCommentsInput, UsersUncheckedCreateWithoutLikedCommentsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLikedCommentsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLikedCommentsInput, UsersUncheckedUpdateWithoutLikedCommentsInput>
  }

  export type UsersUpdateWithoutLikedCommentsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutLikedCommentsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    viewedPosts?: UserViewedPostUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutLikedByInput = {
    update: XOR<CommentUpdateWithoutLikedByInput, CommentUncheckedUpdateWithoutLikedByInput>
    create: XOR<CommentCreateWithoutLikedByInput, CommentUncheckedCreateWithoutLikedByInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutLikedByInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutLikedByInput, CommentUncheckedUpdateWithoutLikedByInput>
  }

  export type CommentUpdateWithoutLikedByInput = {
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    createdBy?: UsersUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutLikedByInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    commentIdPost?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIdUser?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateWithoutViewedPostsInput = {
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    nsu?: NsuCreateNestedOneWithoutUserInput
    posts?: PostCreateNestedManyWithoutCreatedByInput
    comments?: CommentCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutViewedPostsInput = {
    idUser: number
    displayedName: string
    pic?: string | null
    admin?: boolean
    password?: string | null
    posts?: PostUncheckedCreateNestedManyWithoutCreatedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutCreatedByInput
    likedPosts?: UserLikedPostUncheckedCreateNestedManyWithoutUserInput
    likedComments?: UserLikedCommentUncheckedCreateNestedManyWithoutUserInput
    followedTags?: UserFollowedTagUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutViewedPostsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutViewedPostsInput, UsersUncheckedCreateWithoutViewedPostsInput>
  }

  export type PostCreateWithoutViewedByInput = {
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdBy: UsersCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutViewedByInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
    createdByIdUser: number
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likedBy?: UserLikedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutViewedByInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutViewedByInput, PostUncheckedCreateWithoutViewedByInput>
  }

  export type UsersUpsertWithoutViewedPostsInput = {
    update: XOR<UsersUpdateWithoutViewedPostsInput, UsersUncheckedUpdateWithoutViewedPostsInput>
    create: XOR<UsersCreateWithoutViewedPostsInput, UsersUncheckedCreateWithoutViewedPostsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutViewedPostsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutViewedPostsInput, UsersUncheckedUpdateWithoutViewedPostsInput>
  }

  export type UsersUpdateWithoutViewedPostsInput = {
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    nsu?: NsuUpdateOneWithoutUserNestedInput
    posts?: PostUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutViewedPostsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    displayedName?: StringFieldUpdateOperationsInput | string
    pic?: NullableStringFieldUpdateOperationsInput | string | null
    admin?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostUncheckedUpdateManyWithoutCreatedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutCreatedByNestedInput
    likedPosts?: UserLikedPostUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: UserLikedCommentUncheckedUpdateManyWithoutUserNestedInput
    followedTags?: UserFollowedTagUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutViewedByInput = {
    update: XOR<PostUpdateWithoutViewedByInput, PostUncheckedUpdateWithoutViewedByInput>
    create: XOR<PostCreateWithoutViewedByInput, PostUncheckedCreateWithoutViewedByInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutViewedByInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutViewedByInput, PostUncheckedUpdateWithoutViewedByInput>
  }

  export type PostUpdateWithoutViewedByInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdBy?: UsersUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutViewedByInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyCreatedByInput = {
    idPost?: number
    content: string
    images?: string | null
    tags?: string | null
    createdAt?: Date | string
    views?: number
    likes?: number
  }

  export type CommentCreateManyCreatedByInput = {
    idComment?: number
    commentIdPost: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
  }

  export type UserLikedPostCreateManyUserInput = {
    idPost: number
  }

  export type UserLikedCommentCreateManyUserInput = {
    idComment: number
  }

  export type UserViewedPostCreateManyUserInput = {
    idPost: number
  }

  export type UserFollowedTagCreateManyUserInput = {
    idTag: number
  }

  export type PostUpdateWithoutCreatedByInput = {
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCreatedByInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likedBy?: UserLikedPostUncheckedUpdateManyWithoutPostNestedInput
    viewedBy?: UserViewedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutCreatedByInput = {
    idPost?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    tags?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    views?: IntFieldUpdateOperationsInput | number
    likes?: IntFieldUpdateOperationsInput | number
  }

  export type CommentUpdateWithoutCreatedByInput = {
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likedBy?: UserLikedCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutCreatedByInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    commentIdPost?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likedBy?: UserLikedCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutCreatedByInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    commentIdPost?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserLikedPostUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutLikedByNestedInput
  }

  export type UserLikedPostUncheckedUpdateWithoutUserInput = {
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedPostUncheckedUpdateManyWithoutUserInput = {
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentUpdateWithoutUserInput = {
    comment?: CommentUpdateOneRequiredWithoutLikedByNestedInput
  }

  export type UserLikedCommentUncheckedUpdateWithoutUserInput = {
    idComment?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentUncheckedUpdateManyWithoutUserInput = {
    idComment?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutViewedByNestedInput
  }

  export type UserViewedPostUncheckedUpdateWithoutUserInput = {
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostUncheckedUpdateManyWithoutUserInput = {
    idPost?: IntFieldUpdateOperationsInput | number
  }

  export type UserFollowedTagUpdateWithoutUserInput = {
    tag?: TagUpdateOneRequiredWithoutFollowedByNestedInput
  }

  export type UserFollowedTagUncheckedUpdateWithoutUserInput = {
    idTag?: IntFieldUpdateOperationsInput | number
  }

  export type UserFollowedTagUncheckedUpdateManyWithoutUserInput = {
    idTag?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateManyPostInput = {
    idComment?: number
    text: string
    images?: string | null
    likes?: number
    createdAt?: Date | string
    createdByIdUser: number
  }

  export type UserLikedPostCreateManyPostInput = {
    idUser: number
  }

  export type UserViewedPostCreateManyPostInput = {
    idUser: number
  }

  export type CommentUpdateWithoutPostInput = {
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UsersUpdateOneRequiredWithoutCommentsNestedInput
    likedBy?: UserLikedCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIdUser?: IntFieldUpdateOperationsInput | number
    likedBy?: UserLikedCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    idComment?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    images?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdByIdUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedPostUpdateWithoutPostInput = {
    user?: UsersUpdateOneRequiredWithoutLikedPostsNestedInput
  }

  export type UserLikedPostUncheckedUpdateWithoutPostInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedPostUncheckedUpdateManyWithoutPostInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostUpdateWithoutPostInput = {
    user?: UsersUpdateOneRequiredWithoutViewedPostsNestedInput
  }

  export type UserViewedPostUncheckedUpdateWithoutPostInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserViewedPostUncheckedUpdateManyWithoutPostInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentCreateManyCommentInput = {
    idUser: number
  }

  export type UserLikedCommentUpdateWithoutCommentInput = {
    user?: UsersUpdateOneRequiredWithoutLikedCommentsNestedInput
  }

  export type UserLikedCommentUncheckedUpdateWithoutCommentInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserLikedCommentUncheckedUpdateManyWithoutCommentInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserFollowedTagCreateManyTagInput = {
    idUser: number
  }

  export type UserFollowedTagUpdateWithoutTagInput = {
    user?: UsersUpdateOneRequiredWithoutFollowedTagsNestedInput
  }

  export type UserFollowedTagUncheckedUpdateWithoutTagInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserFollowedTagUncheckedUpdateManyWithoutTagInput = {
    idUser?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}